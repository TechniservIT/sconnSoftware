//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iotInterop.iotDbService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="iotDomain", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class iotDomain : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DomainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Site[] SitesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DomainId {
            get {
                return this.DomainIdField;
            }
            set {
                if ((this.DomainIdField.Equals(value) != true)) {
                    this.DomainIdField = value;
                    this.RaisePropertyChanged("DomainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainName {
            get {
                return this.DomainNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainNameField, value) != true)) {
                    this.DomainNameField = value;
                    this.RaisePropertyChanged("DomainName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Site[] Sites {
            get {
                return this.SitesField;
            }
            set {
                if ((object.ReferenceEquals(this.SitesField, value) != true)) {
                    this.SitesField = value;
                    this.RaisePropertyChanged("Sites");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Site", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Site : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Device[] DevicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.iotDomain DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SiteIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Location siteLocationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Device[] Devices {
            get {
                return this.DevicesField;
            }
            set {
                if ((object.ReferenceEquals(this.DevicesField, value) != true)) {
                    this.DevicesField = value;
                    this.RaisePropertyChanged("Devices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.iotDomain Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SiteId {
            get {
                return this.SiteIdField;
            }
            set {
                if ((this.SiteIdField.Equals(value) != true)) {
                    this.SiteIdField = value;
                    this.RaisePropertyChanged("SiteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteName {
            get {
                return this.SiteNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteNameField, value) != true)) {
                    this.SiteNameField = value;
                    this.RaisePropertyChanged("SiteName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Location siteLocation {
            get {
                return this.siteLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.siteLocationField, value) != true)) {
                    this.siteLocationField = value;
                    this.RaisePropertyChanged("siteLocation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LngField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lng {
            get {
                return this.LngField;
            }
            set {
                if ((this.LngField.Equals(value) != true)) {
                    this.LngField = value;
                    this.RaisePropertyChanged("Lng");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((this.LocationIdField.Equals(value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocationName {
            get {
                return this.LocationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationNameField, value) != true)) {
                    this.LocationNameField = value;
                    this.RaisePropertyChanged("LocationName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Device : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceAction[] ActionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceCredentials CredentialsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeviceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Location DeviceLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.EndpointInfo EndpInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceProperty[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Site SiteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceAction[] Actions {
            get {
                return this.ActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionsField, value) != true)) {
                    this.ActionsField = value;
                    this.RaisePropertyChanged("Actions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceCredentials Credentials {
            get {
                return this.CredentialsField;
            }
            set {
                if ((object.ReferenceEquals(this.CredentialsField, value) != true)) {
                    this.CredentialsField = value;
                    this.RaisePropertyChanged("Credentials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceId {
            get {
                return this.DeviceIdField;
            }
            set {
                if ((this.DeviceIdField.Equals(value) != true)) {
                    this.DeviceIdField = value;
                    this.RaisePropertyChanged("DeviceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Location DeviceLocation {
            get {
                return this.DeviceLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceLocationField, value) != true)) {
                    this.DeviceLocationField = value;
                    this.RaisePropertyChanged("DeviceLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.EndpointInfo EndpInfo {
            get {
                return this.EndpInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.EndpInfoField, value) != true)) {
                    this.EndpInfoField = value;
                    this.RaisePropertyChanged("EndpInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceProperty[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Site Site {
            get {
                return this.SiteField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteField, value) != true)) {
                    this.SiteField = value;
                    this.RaisePropertyChanged("Site");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceCredentials", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class DeviceCredentials : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.AppAuthLevel AuthLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CredentialIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Device[] DevicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] HashDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PasswordExpireDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PermissionExpireDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.AppAuthLevel AuthLevel {
            get {
                return this.AuthLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthLevelField, value) != true)) {
                    this.AuthLevelField = value;
                    this.RaisePropertyChanged("AuthLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CredentialId {
            get {
                return this.CredentialIdField;
            }
            set {
                if ((this.CredentialIdField.Equals(value) != true)) {
                    this.CredentialIdField = value;
                    this.RaisePropertyChanged("CredentialId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Device[] Devices {
            get {
                return this.DevicesField;
            }
            set {
                if ((object.ReferenceEquals(this.DevicesField, value) != true)) {
                    this.DevicesField = value;
                    this.RaisePropertyChanged("Devices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] HashData {
            get {
                return this.HashDataField;
            }
            set {
                if ((object.ReferenceEquals(this.HashDataField, value) != true)) {
                    this.HashDataField = value;
                    this.RaisePropertyChanged("HashData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PasswordExpireDate {
            get {
                return this.PasswordExpireDateField;
            }
            set {
                if ((this.PasswordExpireDateField.Equals(value) != true)) {
                    this.PasswordExpireDateField = value;
                    this.RaisePropertyChanged("PasswordExpireDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PermissionExpireDate {
            get {
                return this.PermissionExpireDateField;
            }
            set {
                if ((this.PermissionExpireDateField.Equals(value) != true)) {
                    this.PermissionExpireDateField = value;
                    this.RaisePropertyChanged("PermissionExpireDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndpointInfo", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class EndpointInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Device DeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EndpointIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequiresAuthenticationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsAllJoynProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsCoAPProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsMQTTProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsOnvifProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsRESTfulProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportsSconnProtocolField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Device Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndpointId {
            get {
                return this.EndpointIdField;
            }
            set {
                if ((this.EndpointIdField.Equals(value) != true)) {
                    this.EndpointIdField = value;
                    this.RaisePropertyChanged("EndpointId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hostname {
            get {
                return this.HostnameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostnameField, value) != true)) {
                    this.HostnameField = value;
                    this.RaisePropertyChanged("Hostname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequiresAuthentication {
            get {
                return this.RequiresAuthenticationField;
            }
            set {
                if ((this.RequiresAuthenticationField.Equals(value) != true)) {
                    this.RequiresAuthenticationField = value;
                    this.RaisePropertyChanged("RequiresAuthentication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsAllJoynProtocol {
            get {
                return this.SupportsAllJoynProtocolField;
            }
            set {
                if ((this.SupportsAllJoynProtocolField.Equals(value) != true)) {
                    this.SupportsAllJoynProtocolField = value;
                    this.RaisePropertyChanged("SupportsAllJoynProtocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsCoAPProtocol {
            get {
                return this.SupportsCoAPProtocolField;
            }
            set {
                if ((this.SupportsCoAPProtocolField.Equals(value) != true)) {
                    this.SupportsCoAPProtocolField = value;
                    this.RaisePropertyChanged("SupportsCoAPProtocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsMQTTProtocol {
            get {
                return this.SupportsMQTTProtocolField;
            }
            set {
                if ((this.SupportsMQTTProtocolField.Equals(value) != true)) {
                    this.SupportsMQTTProtocolField = value;
                    this.RaisePropertyChanged("SupportsMQTTProtocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsOnvifProtocol {
            get {
                return this.SupportsOnvifProtocolField;
            }
            set {
                if ((this.SupportsOnvifProtocolField.Equals(value) != true)) {
                    this.SupportsOnvifProtocolField = value;
                    this.RaisePropertyChanged("SupportsOnvifProtocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsRESTfulProtocol {
            get {
                return this.SupportsRESTfulProtocolField;
            }
            set {
                if ((this.SupportsRESTfulProtocolField.Equals(value) != true)) {
                    this.SupportsRESTfulProtocolField = value;
                    this.RaisePropertyChanged("SupportsRESTfulProtocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportsSconnProtocol {
            get {
                return this.SupportsSconnProtocolField;
            }
            set {
                if ((this.SupportsSconnProtocolField.Equals(value) != true)) {
                    this.SupportsSconnProtocolField = value;
                    this.RaisePropertyChanged("SupportsSconnProtocol");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceType", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class DeviceType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeviceTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Device[] DevicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisualRepresentationURLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeviceTypeId {
            get {
                return this.DeviceTypeIdField;
            }
            set {
                if ((this.DeviceTypeIdField.Equals(value) != true)) {
                    this.DeviceTypeIdField = value;
                    this.RaisePropertyChanged("DeviceTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Device[] Devices {
            get {
                return this.DevicesField;
            }
            set {
                if ((object.ReferenceEquals(this.DevicesField, value) != true)) {
                    this.DevicesField = value;
                    this.RaisePropertyChanged("Devices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeDescription {
            get {
                return this.TypeDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeDescriptionField, value) != true)) {
                    this.TypeDescriptionField = value;
                    this.RaisePropertyChanged("TypeDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisualRepresentationURL {
            get {
                return this.VisualRepresentationURLField;
            }
            set {
                if ((object.ReferenceEquals(this.VisualRepresentationURLField, value) != true)) {
                    this.VisualRepresentationURLField = value;
                    this.RaisePropertyChanged("VisualRepresentationURL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceAction", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class DeviceAction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Device DeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastActivationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.ActionParameter[] RequiredParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceParameter[] ResultParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisualRepresentationURLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionDescription {
            get {
                return this.ActionDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionDescriptionField, value) != true)) {
                    this.ActionDescriptionField = value;
                    this.RaisePropertyChanged("ActionDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActionId {
            get {
                return this.ActionIdField;
            }
            set {
                if ((this.ActionIdField.Equals(value) != true)) {
                    this.ActionIdField = value;
                    this.RaisePropertyChanged("ActionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionName {
            get {
                return this.ActionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionNameField, value) != true)) {
                    this.ActionNameField = value;
                    this.RaisePropertyChanged("ActionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Device Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastActivationTime {
            get {
                return this.LastActivationTimeField;
            }
            set {
                if ((this.LastActivationTimeField.Equals(value) != true)) {
                    this.LastActivationTimeField = value;
                    this.RaisePropertyChanged("LastActivationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.ActionParameter[] RequiredParameters {
            get {
                return this.RequiredParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.RequiredParametersField, value) != true)) {
                    this.RequiredParametersField = value;
                    this.RaisePropertyChanged("RequiredParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceParameter[] ResultParameters {
            get {
                return this.ResultParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultParametersField, value) != true)) {
                    this.ResultParametersField = value;
                    this.RaisePropertyChanged("ResultParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisualRepresentationURL {
            get {
                return this.VisualRepresentationURLField;
            }
            set {
                if ((object.ReferenceEquals(this.VisualRepresentationURLField, value) != true)) {
                    this.VisualRepresentationURLField = value;
                    this.RaisePropertyChanged("VisualRepresentationURL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceProperty", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class DeviceProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.Device DeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceParameter[] ResultParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisualRepresentationURLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.Device Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateTime {
            get {
                return this.LastUpdateTimeField;
            }
            set {
                if ((this.LastUpdateTimeField.Equals(value) != true)) {
                    this.LastUpdateTimeField = value;
                    this.RaisePropertyChanged("LastUpdateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyDescription {
            get {
                return this.PropertyDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyDescriptionField, value) != true)) {
                    this.PropertyDescriptionField = value;
                    this.RaisePropertyChanged("PropertyDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyId {
            get {
                return this.PropertyIdField;
            }
            set {
                if ((this.PropertyIdField.Equals(value) != true)) {
                    this.PropertyIdField = value;
                    this.RaisePropertyChanged("PropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceParameter[] ResultParameters {
            get {
                return this.ResultParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultParametersField, value) != true)) {
                    this.ResultParametersField = value;
                    this.RaisePropertyChanged("ResultParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisualRepresentationURL {
            get {
                return this.VisualRepresentationURLField;
            }
            set {
                if ((object.ReferenceEquals(this.VisualRepresentationURLField, value) != true)) {
                    this.VisualRepresentationURLField = value;
                    this.RaisePropertyChanged("VisualRepresentationURL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionParameter", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ActionParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceAction ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.ParameterType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisualRepresentationUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.sconnConfigMapper[] sconnMappersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceAction Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParamDescription {
            get {
                return this.ParamDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamDescriptionField, value) != true)) {
                    this.ParamDescriptionField = value;
                    this.RaisePropertyChanged("ParamDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParameterId {
            get {
                return this.ParameterIdField;
            }
            set {
                if ((this.ParameterIdField.Equals(value) != true)) {
                    this.ParameterIdField = value;
                    this.RaisePropertyChanged("ParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.ParameterType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisualRepresentationUrl {
            get {
                return this.VisualRepresentationUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.VisualRepresentationUrlField, value) != true)) {
                    this.VisualRepresentationUrlField = value;
                    this.RaisePropertyChanged("VisualRepresentationUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.sconnConfigMapper[] sconnMappers {
            get {
                return this.sconnMappersField;
            }
            set {
                if ((object.ReferenceEquals(this.sconnMappersField, value) != true)) {
                    this.sconnMappersField = value;
                    this.RaisePropertyChanged("sconnMappers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceParameter", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class DeviceParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceAction ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.ParameterChangeHistory[] ChangesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceProperty PropertyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.ParameterType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisualRepresentationUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.sconnConfigMapper[] sconnMappersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceAction Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.ParameterChangeHistory[] Changes {
            get {
                return this.ChangesField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangesField, value) != true)) {
                    this.ChangesField = value;
                    this.RaisePropertyChanged("Changes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParamDescription {
            get {
                return this.ParamDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamDescriptionField, value) != true)) {
                    this.ParamDescriptionField = value;
                    this.RaisePropertyChanged("ParamDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParameterId {
            get {
                return this.ParameterIdField;
            }
            set {
                if ((this.ParameterIdField.Equals(value) != true)) {
                    this.ParameterIdField = value;
                    this.RaisePropertyChanged("ParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceProperty Property {
            get {
                return this.PropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyField, value) != true)) {
                    this.PropertyField = value;
                    this.RaisePropertyChanged("Property");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.ParameterType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisualRepresentationUrl {
            get {
                return this.VisualRepresentationUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.VisualRepresentationUrlField, value) != true)) {
                    this.VisualRepresentationUrlField = value;
                    this.RaisePropertyChanged("VisualRepresentationUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.sconnConfigMapper[] sconnMappers {
            get {
                return this.sconnMappersField;
            }
            set {
                if ((object.ReferenceEquals(this.sconnMappersField, value) != true)) {
                    this.sconnMappersField = value;
                    this.RaisePropertyChanged("sconnMappers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParameterType", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ParameterType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentationURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceParameter[] ParametersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentationURL {
            get {
                return this.DocumentationURLField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentationURLField, value) != true)) {
                    this.DocumentationURLField = value;
                    this.RaisePropertyChanged("DocumentationURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParameterId {
            get {
                return this.ParameterIdField;
            }
            set {
                if ((this.ParameterIdField.Equals(value) != true)) {
                    this.ParameterIdField = value;
                    this.RaisePropertyChanged("ParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceParameter[] Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="sconnConfigMapper", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL")]
    [System.SerializableAttribute()]
    public partial class sconnConfigMapper : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.ActionParameter ActionParamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConfigTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MapperIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceParameter ParameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.ActionParameter ActionParam {
            get {
                return this.ActionParamField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionParamField, value) != true)) {
                    this.ActionParamField = value;
                    this.RaisePropertyChanged("ActionParam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConfigType {
            get {
                return this.ConfigTypeField;
            }
            set {
                if ((this.ConfigTypeField.Equals(value) != true)) {
                    this.ConfigTypeField = value;
                    this.RaisePropertyChanged("ConfigType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MapperId {
            get {
                return this.MapperIdField;
            }
            set {
                if ((this.MapperIdField.Equals(value) != true)) {
                    this.MapperIdField = value;
                    this.RaisePropertyChanged("MapperId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceParameter Parameter {
            get {
                return this.ParameterField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterField, value) != true)) {
                    this.ParameterField = value;
                    this.RaisePropertyChanged("Parameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SeqNumber {
            get {
                return this.SeqNumberField;
            }
            set {
                if ((this.SeqNumberField.Equals(value) != true)) {
                    this.SeqNumberField = value;
                    this.RaisePropertyChanged("SeqNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParameterChangeHistory", Namespace="http://schemas.datacontract.org/2004/07/iotDatabaseConnector.DAL.POCO.Device.Noti" +
        "fy")]
    [System.SerializableAttribute()]
    public partial class ParameterChangeHistory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParameterChangeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceParameter PropertyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParameterChangeId {
            get {
                return this.ParameterChangeIdField;
            }
            set {
                if ((this.ParameterChangeIdField.Equals(value) != true)) {
                    this.ParameterChangeIdField = value;
                    this.RaisePropertyChanged("ParameterChangeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceParameter Property {
            get {
                return this.PropertyField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyField, value) != true)) {
                    this.PropertyField = value;
                    this.RaisePropertyChanged("Property");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppAuthLevel", Namespace="http://schemas.datacontract.org/2004/07/iotDbConnector.DAL")]
    [System.SerializableAttribute()]
    public partial class AppAuthLevel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AppAuthLevelIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iotInterop.iotDbService.DeviceCredentials[] CredentialsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WriteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AppAuthLevelId {
            get {
                return this.AppAuthLevelIdField;
            }
            set {
                if ((this.AppAuthLevelIdField.Equals(value) != true)) {
                    this.AppAuthLevelIdField = value;
                    this.RaisePropertyChanged("AppAuthLevelId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iotInterop.iotDbService.DeviceCredentials[] Credentials {
            get {
                return this.CredentialsField;
            }
            set {
                if ((object.ReferenceEquals(this.CredentialsField, value) != true)) {
                    this.CredentialsField = value;
                    this.RaisePropertyChanged("Credentials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Read {
            get {
                return this.ReadField;
            }
            set {
                if ((this.ReadField.Equals(value) != true)) {
                    this.ReadField = value;
                    this.RaisePropertyChanged("Read");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Write {
            get {
                return this.WriteField;
            }
            set {
                if ((this.WriteField.Equals(value) != true)) {
                    this.WriteField = value;
                    this.RaisePropertyChanged("Write");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="iotDbService.IiotDomainService")]
    public interface IiotDomainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DomainAdd", ReplyAction="http://tempuri.org/IiotDomainService/DomainAddResponse")]
        bool DomainAdd(iotInterop.iotDbService.iotDomain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DomainAdd", ReplyAction="http://tempuri.org/IiotDomainService/DomainAddResponse")]
        System.Threading.Tasks.Task<bool> DomainAddAsync(iotInterop.iotDbService.iotDomain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceAdd", ReplyAction="http://tempuri.org/IiotDomainService/DeviceAddResponse")]
        bool DeviceAdd(iotInterop.iotDbService.Device domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceAdd", ReplyAction="http://tempuri.org/IiotDomainService/DeviceAddResponse")]
        System.Threading.Tasks.Task<bool> DeviceAddAsync(iotInterop.iotDbService.Device domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/SiteAdd", ReplyAction="http://tempuri.org/IiotDomainService/SiteAddResponse")]
        bool SiteAdd(iotInterop.iotDbService.Site domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/SiteAdd", ReplyAction="http://tempuri.org/IiotDomainService/SiteAddResponse")]
        System.Threading.Tasks.Task<bool> SiteAddAsync(iotInterop.iotDbService.Site domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionAdd", ReplyAction="http://tempuri.org/IiotDomainService/ActionAddResponse")]
        bool ActionAdd(iotInterop.iotDbService.DeviceAction domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionAdd", ReplyAction="http://tempuri.org/IiotDomainService/ActionAddResponse")]
        System.Threading.Tasks.Task<bool> ActionAddAsync(iotInterop.iotDbService.DeviceAction domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/PropertyAdd", ReplyAction="http://tempuri.org/IiotDomainService/PropertyAddResponse")]
        bool PropertyAdd(iotInterop.iotDbService.DeviceProperty domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/PropertyAdd", ReplyAction="http://tempuri.org/IiotDomainService/PropertyAddResponse")]
        System.Threading.Tasks.Task<bool> PropertyAddAsync(iotInterop.iotDbService.DeviceProperty domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/LocationAdd", ReplyAction="http://tempuri.org/IiotDomainService/LocationAddResponse")]
        bool LocationAdd(iotInterop.iotDbService.Location domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/LocationAdd", ReplyAction="http://tempuri.org/IiotDomainService/LocationAddResponse")]
        System.Threading.Tasks.Task<bool> LocationAddAsync(iotInterop.iotDbService.Location domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ResParamAdd", ReplyAction="http://tempuri.org/IiotDomainService/ResParamAddResponse")]
        bool ResParamAdd(iotInterop.iotDbService.DeviceParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ResParamAdd", ReplyAction="http://tempuri.org/IiotDomainService/ResParamAddResponse")]
        System.Threading.Tasks.Task<bool> ResParamAddAsync(iotInterop.iotDbService.DeviceParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ReqParamAdd", ReplyAction="http://tempuri.org/IiotDomainService/ReqParamAddResponse")]
        bool ReqParamAdd(iotInterop.iotDbService.ActionParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ReqParamAdd", ReplyAction="http://tempuri.org/IiotDomainService/ReqParamAddResponse")]
        System.Threading.Tasks.Task<bool> ReqParamAddAsync(iotInterop.iotDbService.ActionParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypeAdd", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypeAddResponse")]
        bool DeviceTypeAdd(iotInterop.iotDbService.DeviceType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypeAdd", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypeAddResponse")]
        System.Threading.Tasks.Task<bool> DeviceTypeAddAsync(iotInterop.iotDbService.DeviceType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentialsAdd", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialsAddResponse")]
        bool DeviceCredentialsAdd(iotInterop.iotDbService.DeviceCredentials creds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentialsAdd", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialsAddResponse")]
        System.Threading.Tasks.Task<bool> DeviceCredentialsAddAsync(iotInterop.iotDbService.DeviceCredentials creds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/EndpointAdd", ReplyAction="http://tempuri.org/IiotDomainService/EndpointAddResponse")]
        bool EndpointAdd(iotInterop.iotDbService.EndpointInfo endp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/EndpointAdd", ReplyAction="http://tempuri.org/IiotDomainService/EndpointAddResponse")]
        System.Threading.Tasks.Task<bool> EndpointAddAsync(iotInterop.iotDbService.EndpointInfo endp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Sites", ReplyAction="http://tempuri.org/IiotDomainService/SitesResponse")]
        iotInterop.iotDbService.Site[] Sites();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Sites", ReplyAction="http://tempuri.org/IiotDomainService/SitesResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.Site[]> SitesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Devices", ReplyAction="http://tempuri.org/IiotDomainService/DevicesResponse")]
        iotInterop.iotDbService.Device[] Devices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Devices", ReplyAction="http://tempuri.org/IiotDomainService/DevicesResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.Device[]> DevicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceActions", ReplyAction="http://tempuri.org/IiotDomainService/DeviceActionsResponse")]
        iotInterop.iotDbService.DeviceAction[] DeviceActions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceActions", ReplyAction="http://tempuri.org/IiotDomainService/DeviceActionsResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceAction[]> DeviceActionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceProperties", ReplyAction="http://tempuri.org/IiotDomainService/DevicePropertiesResponse")]
        iotInterop.iotDbService.DeviceProperty[] DeviceProperties();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceProperties", ReplyAction="http://tempuri.org/IiotDomainService/DevicePropertiesResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceProperty[]> DevicePropertiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceParameters", ReplyAction="http://tempuri.org/IiotDomainService/DeviceParametersResponse")]
        iotInterop.iotDbService.DeviceParameter[] DeviceParameters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceParameters", ReplyAction="http://tempuri.org/IiotDomainService/DeviceParametersResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceParameter[]> DeviceParametersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Domains", ReplyAction="http://tempuri.org/IiotDomainService/DomainsResponse")]
        iotInterop.iotDbService.iotDomain[] Domains();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Domains", ReplyAction="http://tempuri.org/IiotDomainService/DomainsResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.iotDomain[]> DomainsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/GetDomainWithName", ReplyAction="http://tempuri.org/IiotDomainService/GetDomainWithNameResponse")]
        iotInterop.iotDbService.iotDomain GetDomainWithName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/GetDomainWithName", ReplyAction="http://tempuri.org/IiotDomainService/GetDomainWithNameResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.iotDomain> GetDomainWithNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Locations", ReplyAction="http://tempuri.org/IiotDomainService/LocationsResponse")]
        iotInterop.iotDbService.Location[] Locations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Locations", ReplyAction="http://tempuri.org/IiotDomainService/LocationsResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.Location[]> LocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypes", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypesResponse")]
        iotInterop.iotDbService.DeviceType[] DeviceTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypes", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypesResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceType[]> DeviceTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionParams", ReplyAction="http://tempuri.org/IiotDomainService/ActionParamsResponse")]
        iotInterop.iotDbService.ActionParameter[] ActionParams();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionParams", ReplyAction="http://tempuri.org/IiotDomainService/ActionParamsResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.ActionParameter[]> ActionParamsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentials", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialsResponse")]
        iotInterop.iotDbService.DeviceCredentials[] DeviceCredentials();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentials", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialsResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceCredentials[]> DeviceCredentialsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Endpoints", ReplyAction="http://tempuri.org/IiotDomainService/EndpointsResponse")]
        iotInterop.iotDbService.EndpointInfo[] Endpoints();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/Endpoints", ReplyAction="http://tempuri.org/IiotDomainService/EndpointsResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.EndpointInfo[]> EndpointsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/GetDomainWithId", ReplyAction="http://tempuri.org/IiotDomainService/GetDomainWithIdResponse")]
        iotInterop.iotDbService.iotDomain GetDomainWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/GetDomainWithId", ReplyAction="http://tempuri.org/IiotDomainService/GetDomainWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.iotDomain> GetDomainWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/SiteWithId", ReplyAction="http://tempuri.org/IiotDomainService/SiteWithIdResponse")]
        iotInterop.iotDbService.Site SiteWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/SiteWithId", ReplyAction="http://tempuri.org/IiotDomainService/SiteWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.Site> SiteWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceWithIdResponse")]
        iotInterop.iotDbService.Device DeviceWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.Device> DeviceWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceActionWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceActionWithIdResponse")]
        iotInterop.iotDbService.DeviceAction DeviceActionWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceActionWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceActionWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceAction> DeviceActionWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DevicePropertieWithId", ReplyAction="http://tempuri.org/IiotDomainService/DevicePropertieWithIdResponse")]
        iotInterop.iotDbService.DeviceProperty DevicePropertieWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DevicePropertieWithId", ReplyAction="http://tempuri.org/IiotDomainService/DevicePropertieWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceProperty> DevicePropertieWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceParameterWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceParameterWithIdResponse")]
        iotInterop.iotDbService.DeviceParameter DeviceParameterWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceParameterWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceParameterWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceParameter> DeviceParameterWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DomainWithId", ReplyAction="http://tempuri.org/IiotDomainService/DomainWithIdResponse")]
        iotInterop.iotDbService.iotDomain DomainWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DomainWithId", ReplyAction="http://tempuri.org/IiotDomainService/DomainWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.iotDomain> DomainWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/LocationWithId", ReplyAction="http://tempuri.org/IiotDomainService/LocationWithIdResponse")]
        iotInterop.iotDbService.Location LocationWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/LocationWithId", ReplyAction="http://tempuri.org/IiotDomainService/LocationWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.Location> LocationWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypeWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypeWithIdResponse")]
        iotInterop.iotDbService.DeviceType DeviceTypeWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypeWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypeWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceType> DeviceTypeWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionParamWithId", ReplyAction="http://tempuri.org/IiotDomainService/ActionParamWithIdResponse")]
        iotInterop.iotDbService.ActionParameter ActionParamWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionParamWithId", ReplyAction="http://tempuri.org/IiotDomainService/ActionParamWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.ActionParameter> ActionParamWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentialWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialWithIdResponse")]
        iotInterop.iotDbService.DeviceCredentials DeviceCredentialWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentialWithId", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceCredentials> DeviceCredentialWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/EndpointWithId", ReplyAction="http://tempuri.org/IiotDomainService/EndpointWithIdResponse")]
        iotInterop.iotDbService.EndpointInfo EndpointWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/EndpointWithId", ReplyAction="http://tempuri.org/IiotDomainService/EndpointWithIdResponse")]
        System.Threading.Tasks.Task<iotInterop.iotDbService.EndpointInfo> EndpointWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DomainUpdate", ReplyAction="http://tempuri.org/IiotDomainService/DomainUpdateResponse")]
        bool DomainUpdate(iotInterop.iotDbService.iotDomain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DomainUpdate", ReplyAction="http://tempuri.org/IiotDomainService/DomainUpdateResponse")]
        System.Threading.Tasks.Task<bool> DomainUpdateAsync(iotInterop.iotDbService.iotDomain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceUpdate", ReplyAction="http://tempuri.org/IiotDomainService/DeviceUpdateResponse")]
        bool DeviceUpdate(iotInterop.iotDbService.Device domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceUpdate", ReplyAction="http://tempuri.org/IiotDomainService/DeviceUpdateResponse")]
        System.Threading.Tasks.Task<bool> DeviceUpdateAsync(iotInterop.iotDbService.Device domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/SiteUpdate", ReplyAction="http://tempuri.org/IiotDomainService/SiteUpdateResponse")]
        bool SiteUpdate(iotInterop.iotDbService.Site domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/SiteUpdate", ReplyAction="http://tempuri.org/IiotDomainService/SiteUpdateResponse")]
        System.Threading.Tasks.Task<bool> SiteUpdateAsync(iotInterop.iotDbService.Site domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionUpdate", ReplyAction="http://tempuri.org/IiotDomainService/ActionUpdateResponse")]
        bool ActionUpdate(iotInterop.iotDbService.DeviceAction domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionUpdate", ReplyAction="http://tempuri.org/IiotDomainService/ActionUpdateResponse")]
        System.Threading.Tasks.Task<bool> ActionUpdateAsync(iotInterop.iotDbService.DeviceAction domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/PropertyUpdate", ReplyAction="http://tempuri.org/IiotDomainService/PropertyUpdateResponse")]
        bool PropertyUpdate(iotInterop.iotDbService.DeviceProperty domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/PropertyUpdate", ReplyAction="http://tempuri.org/IiotDomainService/PropertyUpdateResponse")]
        System.Threading.Tasks.Task<bool> PropertyUpdateAsync(iotInterop.iotDbService.DeviceProperty domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/LocationUpdate", ReplyAction="http://tempuri.org/IiotDomainService/LocationUpdateResponse")]
        bool LocationUpdate(iotInterop.iotDbService.Location domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/LocationUpdate", ReplyAction="http://tempuri.org/IiotDomainService/LocationUpdateResponse")]
        System.Threading.Tasks.Task<bool> LocationUpdateAsync(iotInterop.iotDbService.Location domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ResParamUpdate", ReplyAction="http://tempuri.org/IiotDomainService/ResParamUpdateResponse")]
        bool ResParamUpdate(iotInterop.iotDbService.DeviceParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ResParamUpdate", ReplyAction="http://tempuri.org/IiotDomainService/ResParamUpdateResponse")]
        System.Threading.Tasks.Task<bool> ResParamUpdateAsync(iotInterop.iotDbService.DeviceParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ReqParamUpdate", ReplyAction="http://tempuri.org/IiotDomainService/ReqParamUpdateResponse")]
        bool ReqParamUpdate(iotInterop.iotDbService.ActionParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ReqParamUpdate", ReplyAction="http://tempuri.org/IiotDomainService/ReqParamUpdateResponse")]
        System.Threading.Tasks.Task<bool> ReqParamUpdateAsync(iotInterop.iotDbService.ActionParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypeUpdate", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypeUpdateResponse")]
        bool DeviceTypeUpdate(iotInterop.iotDbService.DeviceType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypeUpdate", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypeUpdateResponse")]
        System.Threading.Tasks.Task<bool> DeviceTypeUpdateAsync(iotInterop.iotDbService.DeviceType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentialsUpdate", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialsUpdateResponse")]
        bool DeviceCredentialsUpdate(iotInterop.iotDbService.DeviceCredentials creds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentialsUpdate", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialsUpdateResponse")]
        System.Threading.Tasks.Task<bool> DeviceCredentialsUpdateAsync(iotInterop.iotDbService.DeviceCredentials creds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/EndpointUpdate", ReplyAction="http://tempuri.org/IiotDomainService/EndpointUpdateResponse")]
        bool EndpointUpdate(iotInterop.iotDbService.EndpointInfo endp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/EndpointUpdate", ReplyAction="http://tempuri.org/IiotDomainService/EndpointUpdateResponse")]
        System.Threading.Tasks.Task<bool> EndpointUpdateAsync(iotInterop.iotDbService.EndpointInfo endp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DomainRemove", ReplyAction="http://tempuri.org/IiotDomainService/DomainRemoveResponse")]
        bool DomainRemove(iotInterop.iotDbService.iotDomain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DomainRemove", ReplyAction="http://tempuri.org/IiotDomainService/DomainRemoveResponse")]
        System.Threading.Tasks.Task<bool> DomainRemoveAsync(iotInterop.iotDbService.iotDomain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceRemove", ReplyAction="http://tempuri.org/IiotDomainService/DeviceRemoveResponse")]
        bool DeviceRemove(iotInterop.iotDbService.Device domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceRemove", ReplyAction="http://tempuri.org/IiotDomainService/DeviceRemoveResponse")]
        System.Threading.Tasks.Task<bool> DeviceRemoveAsync(iotInterop.iotDbService.Device domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/SiteRemove", ReplyAction="http://tempuri.org/IiotDomainService/SiteRemoveResponse")]
        bool SiteRemove(iotInterop.iotDbService.Site domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/SiteRemove", ReplyAction="http://tempuri.org/IiotDomainService/SiteRemoveResponse")]
        System.Threading.Tasks.Task<bool> SiteRemoveAsync(iotInterop.iotDbService.Site domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionRemove", ReplyAction="http://tempuri.org/IiotDomainService/ActionRemoveResponse")]
        bool ActionRemove(iotInterop.iotDbService.DeviceAction domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ActionRemove", ReplyAction="http://tempuri.org/IiotDomainService/ActionRemoveResponse")]
        System.Threading.Tasks.Task<bool> ActionRemoveAsync(iotInterop.iotDbService.DeviceAction domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/PropertyRemove", ReplyAction="http://tempuri.org/IiotDomainService/PropertyRemoveResponse")]
        bool PropertyRemove(iotInterop.iotDbService.DeviceProperty domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/PropertyRemove", ReplyAction="http://tempuri.org/IiotDomainService/PropertyRemoveResponse")]
        System.Threading.Tasks.Task<bool> PropertyRemoveAsync(iotInterop.iotDbService.DeviceProperty domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/LocationRemove", ReplyAction="http://tempuri.org/IiotDomainService/LocationRemoveResponse")]
        bool LocationRemove(iotInterop.iotDbService.Location domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/LocationRemove", ReplyAction="http://tempuri.org/IiotDomainService/LocationRemoveResponse")]
        System.Threading.Tasks.Task<bool> LocationRemoveAsync(iotInterop.iotDbService.Location domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ResParamRemove", ReplyAction="http://tempuri.org/IiotDomainService/ResParamRemoveResponse")]
        bool ResParamRemove(iotInterop.iotDbService.DeviceParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ResParamRemove", ReplyAction="http://tempuri.org/IiotDomainService/ResParamRemoveResponse")]
        System.Threading.Tasks.Task<bool> ResParamRemoveAsync(iotInterop.iotDbService.DeviceParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ReqParamRemove", ReplyAction="http://tempuri.org/IiotDomainService/ReqParamRemoveResponse")]
        bool ReqParamRemove(iotInterop.iotDbService.ActionParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/ReqParamRemove", ReplyAction="http://tempuri.org/IiotDomainService/ReqParamRemoveResponse")]
        System.Threading.Tasks.Task<bool> ReqParamRemoveAsync(iotInterop.iotDbService.ActionParameter domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypeRemove", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypeRemoveResponse")]
        bool DeviceTypeRemove(iotInterop.iotDbService.DeviceType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceTypeRemove", ReplyAction="http://tempuri.org/IiotDomainService/DeviceTypeRemoveResponse")]
        System.Threading.Tasks.Task<bool> DeviceTypeRemoveAsync(iotInterop.iotDbService.DeviceType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentialsRemove", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialsRemoveResponse")]
        bool DeviceCredentialsRemove(iotInterop.iotDbService.DeviceCredentials creds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/DeviceCredentialsRemove", ReplyAction="http://tempuri.org/IiotDomainService/DeviceCredentialsRemoveResponse")]
        System.Threading.Tasks.Task<bool> DeviceCredentialsRemoveAsync(iotInterop.iotDbService.DeviceCredentials creds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/EndpointRemove", ReplyAction="http://tempuri.org/IiotDomainService/EndpointRemoveResponse")]
        bool EndpointRemove(iotInterop.iotDbService.EndpointInfo endp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/EndpointRemove", ReplyAction="http://tempuri.org/IiotDomainService/EndpointRemoveResponse")]
        System.Threading.Tasks.Task<bool> EndpointRemoveAsync(iotInterop.iotDbService.EndpointInfo endp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/UpdateDeviceProperties", ReplyAction="http://tempuri.org/IiotDomainService/UpdateDevicePropertiesResponse")]
        bool UpdateDeviceProperties(iotInterop.iotDbService.Device dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/UpdateDeviceProperties", ReplyAction="http://tempuri.org/IiotDomainService/UpdateDevicePropertiesResponse")]
        System.Threading.Tasks.Task<bool> UpdateDevicePropertiesAsync(iotInterop.iotDbService.Device dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/UpdateDeviceActionState", ReplyAction="http://tempuri.org/IiotDomainService/UpdateDeviceActionStateResponse")]
        bool UpdateDeviceActionState(iotInterop.iotDbService.Device dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/UpdateDeviceActionState", ReplyAction="http://tempuri.org/IiotDomainService/UpdateDeviceActionStateResponse")]
        System.Threading.Tasks.Task<bool> UpdateDeviceActionStateAsync(iotInterop.iotDbService.Device dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/PerformDeviceAction", ReplyAction="http://tempuri.org/IiotDomainService/PerformDeviceActionResponse")]
        bool PerformDeviceAction(iotInterop.iotDbService.DeviceAction act);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IiotDomainService/PerformDeviceAction", ReplyAction="http://tempuri.org/IiotDomainService/PerformDeviceActionResponse")]
        System.Threading.Tasks.Task<bool> PerformDeviceActionAsync(iotInterop.iotDbService.DeviceAction act);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IiotDomainServiceChannel : iotInterop.iotDbService.IiotDomainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IiotDomainServiceClient : System.ServiceModel.ClientBase<iotInterop.iotDbService.IiotDomainService>, iotInterop.iotDbService.IiotDomainService {
        
        public IiotDomainServiceClient() {
        }
        
        public IiotDomainServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IiotDomainServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IiotDomainServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IiotDomainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DomainAdd(iotInterop.iotDbService.iotDomain domain) {
            return base.Channel.DomainAdd(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DomainAddAsync(iotInterop.iotDbService.iotDomain domain) {
            return base.Channel.DomainAddAsync(domain);
        }
        
        public bool DeviceAdd(iotInterop.iotDbService.Device domain) {
            return base.Channel.DeviceAdd(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceAddAsync(iotInterop.iotDbService.Device domain) {
            return base.Channel.DeviceAddAsync(domain);
        }
        
        public bool SiteAdd(iotInterop.iotDbService.Site domain) {
            return base.Channel.SiteAdd(domain);
        }
        
        public System.Threading.Tasks.Task<bool> SiteAddAsync(iotInterop.iotDbService.Site domain) {
            return base.Channel.SiteAddAsync(domain);
        }
        
        public bool ActionAdd(iotInterop.iotDbService.DeviceAction domain) {
            return base.Channel.ActionAdd(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ActionAddAsync(iotInterop.iotDbService.DeviceAction domain) {
            return base.Channel.ActionAddAsync(domain);
        }
        
        public bool PropertyAdd(iotInterop.iotDbService.DeviceProperty domain) {
            return base.Channel.PropertyAdd(domain);
        }
        
        public System.Threading.Tasks.Task<bool> PropertyAddAsync(iotInterop.iotDbService.DeviceProperty domain) {
            return base.Channel.PropertyAddAsync(domain);
        }
        
        public bool LocationAdd(iotInterop.iotDbService.Location domain) {
            return base.Channel.LocationAdd(domain);
        }
        
        public System.Threading.Tasks.Task<bool> LocationAddAsync(iotInterop.iotDbService.Location domain) {
            return base.Channel.LocationAddAsync(domain);
        }
        
        public bool ResParamAdd(iotInterop.iotDbService.DeviceParameter domain) {
            return base.Channel.ResParamAdd(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ResParamAddAsync(iotInterop.iotDbService.DeviceParameter domain) {
            return base.Channel.ResParamAddAsync(domain);
        }
        
        public bool ReqParamAdd(iotInterop.iotDbService.ActionParameter domain) {
            return base.Channel.ReqParamAdd(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ReqParamAddAsync(iotInterop.iotDbService.ActionParameter domain) {
            return base.Channel.ReqParamAddAsync(domain);
        }
        
        public bool DeviceTypeAdd(iotInterop.iotDbService.DeviceType type) {
            return base.Channel.DeviceTypeAdd(type);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceTypeAddAsync(iotInterop.iotDbService.DeviceType type) {
            return base.Channel.DeviceTypeAddAsync(type);
        }
        
        public bool DeviceCredentialsAdd(iotInterop.iotDbService.DeviceCredentials creds) {
            return base.Channel.DeviceCredentialsAdd(creds);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceCredentialsAddAsync(iotInterop.iotDbService.DeviceCredentials creds) {
            return base.Channel.DeviceCredentialsAddAsync(creds);
        }
        
        public bool EndpointAdd(iotInterop.iotDbService.EndpointInfo endp) {
            return base.Channel.EndpointAdd(endp);
        }
        
        public System.Threading.Tasks.Task<bool> EndpointAddAsync(iotInterop.iotDbService.EndpointInfo endp) {
            return base.Channel.EndpointAddAsync(endp);
        }
        
        public iotInterop.iotDbService.Site[] Sites() {
            return base.Channel.Sites();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.Site[]> SitesAsync() {
            return base.Channel.SitesAsync();
        }
        
        public iotInterop.iotDbService.Device[] Devices() {
            return base.Channel.Devices();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.Device[]> DevicesAsync() {
            return base.Channel.DevicesAsync();
        }
        
        public iotInterop.iotDbService.DeviceAction[] DeviceActions() {
            return base.Channel.DeviceActions();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceAction[]> DeviceActionsAsync() {
            return base.Channel.DeviceActionsAsync();
        }
        
        public iotInterop.iotDbService.DeviceProperty[] DeviceProperties() {
            return base.Channel.DeviceProperties();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceProperty[]> DevicePropertiesAsync() {
            return base.Channel.DevicePropertiesAsync();
        }
        
        public iotInterop.iotDbService.DeviceParameter[] DeviceParameters() {
            return base.Channel.DeviceParameters();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceParameter[]> DeviceParametersAsync() {
            return base.Channel.DeviceParametersAsync();
        }
        
        public iotInterop.iotDbService.iotDomain[] Domains() {
            return base.Channel.Domains();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.iotDomain[]> DomainsAsync() {
            return base.Channel.DomainsAsync();
        }
        
        public iotInterop.iotDbService.iotDomain GetDomainWithName(string name) {
            return base.Channel.GetDomainWithName(name);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.iotDomain> GetDomainWithNameAsync(string name) {
            return base.Channel.GetDomainWithNameAsync(name);
        }
        
        public iotInterop.iotDbService.Location[] Locations() {
            return base.Channel.Locations();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.Location[]> LocationsAsync() {
            return base.Channel.LocationsAsync();
        }
        
        public iotInterop.iotDbService.DeviceType[] DeviceTypes() {
            return base.Channel.DeviceTypes();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceType[]> DeviceTypesAsync() {
            return base.Channel.DeviceTypesAsync();
        }
        
        public iotInterop.iotDbService.ActionParameter[] ActionParams() {
            return base.Channel.ActionParams();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.ActionParameter[]> ActionParamsAsync() {
            return base.Channel.ActionParamsAsync();
        }
        
        public iotInterop.iotDbService.DeviceCredentials[] DeviceCredentials() {
            return base.Channel.DeviceCredentials();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceCredentials[]> DeviceCredentialsAsync() {
            return base.Channel.DeviceCredentialsAsync();
        }
        
        public iotInterop.iotDbService.EndpointInfo[] Endpoints() {
            return base.Channel.Endpoints();
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.EndpointInfo[]> EndpointsAsync() {
            return base.Channel.EndpointsAsync();
        }
        
        public iotInterop.iotDbService.iotDomain GetDomainWithId(int id) {
            return base.Channel.GetDomainWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.iotDomain> GetDomainWithIdAsync(int id) {
            return base.Channel.GetDomainWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.Site SiteWithId(int id) {
            return base.Channel.SiteWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.Site> SiteWithIdAsync(int id) {
            return base.Channel.SiteWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.Device DeviceWithId(int id) {
            return base.Channel.DeviceWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.Device> DeviceWithIdAsync(int id) {
            return base.Channel.DeviceWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.DeviceAction DeviceActionWithId(int id) {
            return base.Channel.DeviceActionWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceAction> DeviceActionWithIdAsync(int id) {
            return base.Channel.DeviceActionWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.DeviceProperty DevicePropertieWithId(int id) {
            return base.Channel.DevicePropertieWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceProperty> DevicePropertieWithIdAsync(int id) {
            return base.Channel.DevicePropertieWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.DeviceParameter DeviceParameterWithId(int id) {
            return base.Channel.DeviceParameterWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceParameter> DeviceParameterWithIdAsync(int id) {
            return base.Channel.DeviceParameterWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.iotDomain DomainWithId(int id) {
            return base.Channel.DomainWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.iotDomain> DomainWithIdAsync(int id) {
            return base.Channel.DomainWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.Location LocationWithId(int id) {
            return base.Channel.LocationWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.Location> LocationWithIdAsync(int id) {
            return base.Channel.LocationWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.DeviceType DeviceTypeWithId(int id) {
            return base.Channel.DeviceTypeWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceType> DeviceTypeWithIdAsync(int id) {
            return base.Channel.DeviceTypeWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.ActionParameter ActionParamWithId(int id) {
            return base.Channel.ActionParamWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.ActionParameter> ActionParamWithIdAsync(int id) {
            return base.Channel.ActionParamWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.DeviceCredentials DeviceCredentialWithId(int id) {
            return base.Channel.DeviceCredentialWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.DeviceCredentials> DeviceCredentialWithIdAsync(int id) {
            return base.Channel.DeviceCredentialWithIdAsync(id);
        }
        
        public iotInterop.iotDbService.EndpointInfo EndpointWithId(int id) {
            return base.Channel.EndpointWithId(id);
        }
        
        public System.Threading.Tasks.Task<iotInterop.iotDbService.EndpointInfo> EndpointWithIdAsync(int id) {
            return base.Channel.EndpointWithIdAsync(id);
        }
        
        public bool DomainUpdate(iotInterop.iotDbService.iotDomain domain) {
            return base.Channel.DomainUpdate(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DomainUpdateAsync(iotInterop.iotDbService.iotDomain domain) {
            return base.Channel.DomainUpdateAsync(domain);
        }
        
        public bool DeviceUpdate(iotInterop.iotDbService.Device domain) {
            return base.Channel.DeviceUpdate(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceUpdateAsync(iotInterop.iotDbService.Device domain) {
            return base.Channel.DeviceUpdateAsync(domain);
        }
        
        public bool SiteUpdate(iotInterop.iotDbService.Site domain) {
            return base.Channel.SiteUpdate(domain);
        }
        
        public System.Threading.Tasks.Task<bool> SiteUpdateAsync(iotInterop.iotDbService.Site domain) {
            return base.Channel.SiteUpdateAsync(domain);
        }
        
        public bool ActionUpdate(iotInterop.iotDbService.DeviceAction domain) {
            return base.Channel.ActionUpdate(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ActionUpdateAsync(iotInterop.iotDbService.DeviceAction domain) {
            return base.Channel.ActionUpdateAsync(domain);
        }
        
        public bool PropertyUpdate(iotInterop.iotDbService.DeviceProperty domain) {
            return base.Channel.PropertyUpdate(domain);
        }
        
        public System.Threading.Tasks.Task<bool> PropertyUpdateAsync(iotInterop.iotDbService.DeviceProperty domain) {
            return base.Channel.PropertyUpdateAsync(domain);
        }
        
        public bool LocationUpdate(iotInterop.iotDbService.Location domain) {
            return base.Channel.LocationUpdate(domain);
        }
        
        public System.Threading.Tasks.Task<bool> LocationUpdateAsync(iotInterop.iotDbService.Location domain) {
            return base.Channel.LocationUpdateAsync(domain);
        }
        
        public bool ResParamUpdate(iotInterop.iotDbService.DeviceParameter domain) {
            return base.Channel.ResParamUpdate(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ResParamUpdateAsync(iotInterop.iotDbService.DeviceParameter domain) {
            return base.Channel.ResParamUpdateAsync(domain);
        }
        
        public bool ReqParamUpdate(iotInterop.iotDbService.ActionParameter domain) {
            return base.Channel.ReqParamUpdate(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ReqParamUpdateAsync(iotInterop.iotDbService.ActionParameter domain) {
            return base.Channel.ReqParamUpdateAsync(domain);
        }
        
        public bool DeviceTypeUpdate(iotInterop.iotDbService.DeviceType type) {
            return base.Channel.DeviceTypeUpdate(type);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceTypeUpdateAsync(iotInterop.iotDbService.DeviceType type) {
            return base.Channel.DeviceTypeUpdateAsync(type);
        }
        
        public bool DeviceCredentialsUpdate(iotInterop.iotDbService.DeviceCredentials creds) {
            return base.Channel.DeviceCredentialsUpdate(creds);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceCredentialsUpdateAsync(iotInterop.iotDbService.DeviceCredentials creds) {
            return base.Channel.DeviceCredentialsUpdateAsync(creds);
        }
        
        public bool EndpointUpdate(iotInterop.iotDbService.EndpointInfo endp) {
            return base.Channel.EndpointUpdate(endp);
        }
        
        public System.Threading.Tasks.Task<bool> EndpointUpdateAsync(iotInterop.iotDbService.EndpointInfo endp) {
            return base.Channel.EndpointUpdateAsync(endp);
        }
        
        public bool DomainRemove(iotInterop.iotDbService.iotDomain domain) {
            return base.Channel.DomainRemove(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DomainRemoveAsync(iotInterop.iotDbService.iotDomain domain) {
            return base.Channel.DomainRemoveAsync(domain);
        }
        
        public bool DeviceRemove(iotInterop.iotDbService.Device domain) {
            return base.Channel.DeviceRemove(domain);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceRemoveAsync(iotInterop.iotDbService.Device domain) {
            return base.Channel.DeviceRemoveAsync(domain);
        }
        
        public bool SiteRemove(iotInterop.iotDbService.Site domain) {
            return base.Channel.SiteRemove(domain);
        }
        
        public System.Threading.Tasks.Task<bool> SiteRemoveAsync(iotInterop.iotDbService.Site domain) {
            return base.Channel.SiteRemoveAsync(domain);
        }
        
        public bool ActionRemove(iotInterop.iotDbService.DeviceAction domain) {
            return base.Channel.ActionRemove(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ActionRemoveAsync(iotInterop.iotDbService.DeviceAction domain) {
            return base.Channel.ActionRemoveAsync(domain);
        }
        
        public bool PropertyRemove(iotInterop.iotDbService.DeviceProperty domain) {
            return base.Channel.PropertyRemove(domain);
        }
        
        public System.Threading.Tasks.Task<bool> PropertyRemoveAsync(iotInterop.iotDbService.DeviceProperty domain) {
            return base.Channel.PropertyRemoveAsync(domain);
        }
        
        public bool LocationRemove(iotInterop.iotDbService.Location domain) {
            return base.Channel.LocationRemove(domain);
        }
        
        public System.Threading.Tasks.Task<bool> LocationRemoveAsync(iotInterop.iotDbService.Location domain) {
            return base.Channel.LocationRemoveAsync(domain);
        }
        
        public bool ResParamRemove(iotInterop.iotDbService.DeviceParameter domain) {
            return base.Channel.ResParamRemove(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ResParamRemoveAsync(iotInterop.iotDbService.DeviceParameter domain) {
            return base.Channel.ResParamRemoveAsync(domain);
        }
        
        public bool ReqParamRemove(iotInterop.iotDbService.ActionParameter domain) {
            return base.Channel.ReqParamRemove(domain);
        }
        
        public System.Threading.Tasks.Task<bool> ReqParamRemoveAsync(iotInterop.iotDbService.ActionParameter domain) {
            return base.Channel.ReqParamRemoveAsync(domain);
        }
        
        public bool DeviceTypeRemove(iotInterop.iotDbService.DeviceType type) {
            return base.Channel.DeviceTypeRemove(type);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceTypeRemoveAsync(iotInterop.iotDbService.DeviceType type) {
            return base.Channel.DeviceTypeRemoveAsync(type);
        }
        
        public bool DeviceCredentialsRemove(iotInterop.iotDbService.DeviceCredentials creds) {
            return base.Channel.DeviceCredentialsRemove(creds);
        }
        
        public System.Threading.Tasks.Task<bool> DeviceCredentialsRemoveAsync(iotInterop.iotDbService.DeviceCredentials creds) {
            return base.Channel.DeviceCredentialsRemoveAsync(creds);
        }
        
        public bool EndpointRemove(iotInterop.iotDbService.EndpointInfo endp) {
            return base.Channel.EndpointRemove(endp);
        }
        
        public System.Threading.Tasks.Task<bool> EndpointRemoveAsync(iotInterop.iotDbService.EndpointInfo endp) {
            return base.Channel.EndpointRemoveAsync(endp);
        }
        
        public bool UpdateDeviceProperties(iotInterop.iotDbService.Device dev) {
            return base.Channel.UpdateDeviceProperties(dev);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDevicePropertiesAsync(iotInterop.iotDbService.Device dev) {
            return base.Channel.UpdateDevicePropertiesAsync(dev);
        }
        
        public bool UpdateDeviceActionState(iotInterop.iotDbService.Device dev) {
            return base.Channel.UpdateDeviceActionState(dev);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDeviceActionStateAsync(iotInterop.iotDbService.Device dev) {
            return base.Channel.UpdateDeviceActionStateAsync(dev);
        }
        
        public bool PerformDeviceAction(iotInterop.iotDbService.DeviceAction act) {
            return base.Channel.PerformDeviceAction(act);
        }
        
        public System.Threading.Tasks.Task<bool> PerformDeviceActionAsync(iotInterop.iotDbService.DeviceAction act) {
            return base.Channel.PerformDeviceActionAsync(act);
        }
    }
}
