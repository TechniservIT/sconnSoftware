@model iotDash.Areas.AlarmSystem.Models.AlarmSystemGlobalEditModel
@using iotDash.Helpers
@using Newtonsoft.Json
@using sconnConnector

@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/toggleswitch")
@Scripts.Render("~/bundles/signalr")
@Scripts.Render("~/bundles/numspin")
@Scripts.Render("~/bundles/fancybox")
@Scripts.Render("~/bundles/bootstrap-treeview")
@Scripts.Render("~/bundles/maps")
@Scripts.Render("~/bundles/bootstrap-toggle")

@Styles.Render("~/bundles/css/toggleswitch")
@Styles.Render("~/bundles/css/numspin")
@Styles.Render("~/bundles/css/bootstrap-treeview")
@Styles.Render("~/bundles/css/maps")
@Styles.Render("~/bundles/css/bootstrap-toggle")


<script src="~/signalr/hubs"></script>

@{
    ViewBag.Title = "Index";
}

@if (Model.Config != null)
{
    <h2>@Model.Config.Name</h2>
}


@functions{

    public string SpanClassForArmStatusDisplay()
    {
        if (Model.Config.Armed)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string DescForArmStatusDisplay()
    {
        if (Model.Config.Armed)
        {
            return "Armed";
        }
        else
        {
            return "Disarmed";
        }
    }



    public string SpanClassForViolationStatusDisplay()
    {
        if (Model.Config.Violation)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string SpanClassForFailureStatusDisplay()
    {
        if (Model.Config.Failure)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string DescForViolationStatusDisplay()
    {
        if (Model.Config.Violation)
        {
            return "Yes";
        }
        else
        {
            return "No";
        }
    }


    public string DescForArmAction()
    {
        if (Model.Config.Armed)
        {
            return "Disarm";
        }
        else
        {
            return "Arm";
        }
    }

}


<div class="container-fluid">

    <div class="row">

        <div class="panel panel-default">
            <div class="panel-heading">
                <center>
                    <h2>Global config</h2>
                </center>
            </div>


            <div class="panel-body">

                <div class="row">

                        @using (Html.BeginForm("Edit", "AlarmSystemView"))
                        {
                            <fieldset>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.Name)
                                    @Html.EditorFor(model => model.Config.Name, new { @class = "form-control" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.Lat)
                                    @Html.TextBoxFor(model => model.Config.Lat, new { @class = "form-control" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.Lng)
                                    @Html.TextBoxFor(model => model.Config.Lng, new { @class = "form-control" })
                                </div>


                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.BusComEnabled)
                                    @Html.EditorFor(model => model.Config.BusComEnabled, new { @class = "form-control" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.BusShortMaxDistanceMeters)
                                    @Html.EditorFor(model => model.Config.BusShortMaxDistanceMeters, new { @class = "form-control" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.BusLongMaxDistanceMeters)
                                    @Html.EditorFor(model => model.Config.BusShortMaxDistanceMeters, new { @class = "form-control" })
                                </div>


                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.TcpIpComEnabled)
                                    @Html.EditorFor(model => model.Config.TcpIpComEnabled, new { @class = "form-control" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.IpAddress)
                                    @Html.TextBoxFor(model => model.Config.IpAddress, new { @class = "form-control" })
                                </div>



                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.MaximumPeerSyncIntervalSeconds)
                                    @Html.EditorFor(model => model.Config.MaximumPeerSyncIntervalSeconds, new { @class = "form-control" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.MaximumPeerFailRequests)
                                    @Html.EditorFor(model => model.Config.MaximumPeerFailRequests, new { @class = "form-control" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Config.BusMaxFailedMessagesPerSecond)
                                    @Html.EditorFor(model => model.Config.BusMaxFailedMessagesPerSecond, new { @class = "form-control" })
                                </div>



                                <div class="form-group">
                                    <button class="btn btn-primary" type="submit">Save</button>
                                </div>
                                
                                </fieldset>
                        }
                 </div>

            </div>

        </div>

    </div>

  
</div>