@model iotDash.Areas.AlarmSystem.Models.AlarmSystemGlobalModel
@using sconnConnector

@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/toggleswitch")
@Scripts.Render("~/bundles/signalr")
@Scripts.Render("~/bundles/numspin")
@Scripts.Render("~/bundles/fancybox")
@Scripts.Render("~/bundles/maps")
@Scripts.Render("~/bundles/bootstrap-toggle")

@Styles.Render("~/bundles/css/toggleswitch")
@Styles.Render("~/bundles/css/numspin")
@Styles.Render("~/bundles/css/maps")
@Styles.Render("~/bundles/css/bootstrap-toggle")

@{
    ViewBag.Title = "Index";
}

@if (Model.Config != null)
{
    <h2>@Model.Config.Name</h2>
}

<script src="~/signalr/hubs"></script>


<script type="text/javascript">

    /*
        !!!!!!!!! ALL HUB OBJECTS START WITH LOWERCASE IN JS !!!!!!!!!!
    */
    var hubModel;
    var hubProxy;

    var startLat;
    var startLng;
    var map;
    var IoIcon;

    var markers = [], // an array containing all the markers added to the map
    markersCount = 0; // the number of the added markers

    var outputIconOff = L.ExtraMarkers.icon({
        icon: 'fa-bolt',
        markerColor: 'red',
        shape: 'circle',
        prefix: 'fa'
    });

    var inputIconOff = L.ExtraMarkers.icon({
        icon: 'fa-eye',
        markerColor: 'red',
        shape: 'circle',
        prefix: 'fa'
    });

    var systemIconOff = L.ExtraMarkers.icon({
        icon: 'fa-shield',
        markerColor: 'red',
        shape: 'circle',
        prefix: 'fa'
    });

    var outputIconOn = L.ExtraMarkers.icon({
        icon: 'fa-bolt',
        markerColor: 'green',
        shape: 'circle',
        prefix: 'fa'
    });

    var inputIconOn = L.ExtraMarkers.icon({
        icon: 'fa-eye',
        markerColor: 'green',
        shape: 'circle',
        prefix: 'fa'
    });

    var systemIconOn = L.ExtraMarkers.icon({
        icon: 'fa-shield',
        markerColor: 'green',
        shape: 'circle',
        prefix: 'fa'
    });


    //var mapIoDefninitions = [];
    //var mapIoDefninitionCount = 0;

    function reloadMapCenter() {
        map.panTo(new L.LatLng(startLat, startLng));
    }

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(setMapCenter);
        } else {
        }
    }

    function setMapCenter(position) {
        startLat = position.coords.latitude;
        startLng = position.coords.longitude;
        reloadMapCenter();
    }

    function loadMarkersDataFromModel(model)
    {

    }

    /**************** FILE UPLOAD *************/

    function uploadFile() {
        myApp.showPleaseWait(); //show dialog
        var file = document.getElementById('file_name').files[0];
        var formData = new FormData();
        formdata.append("file_name", file);
        ajax = new XMLHttpRequest();
        ajax.upload.addEventListener("progress", progressHandler, false);
        ajax.addEventListener("load", completeHandler, false);
        ajax.open("POST", "/to/action");
        ajax.send(formdata);
    }

    function progressHandler(event) {
        var percent = (event.loaded / event.total) * 100;
        $('.bar').width(percent); //from bootstrap bar class
    }

    function completeHandler() {
        myApp.hidePleaseWait(); //hide dialog
        $('.bar').width(100);
    }

    function parseBool(value) {
        return (typeof value === "undefined") ?
               false :
               // trim using jQuery.trim()'s source
               value.replace(/^\s+|\s+$/g, "").toLowerCase() === "true";
    }

    $(function () {


        markers = [];   //reset
        markersCount = 0;

        startLat = 49.78395;
        startLng = 19.05815;
        var mapCenter = [startLat, startLng];
        map = L.map('map', { center: mapCenter, zoom: 18 });
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            maxZoom: 24,
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
            id: 'iomap'
        }).addTo(map);


        L.icon = function (options) {
            return new L.Icon(options);
        };


        // Dragging and dropping the markers to the map
        var addMarkers = function () {

            // The position of the marker icon
            var posTop = $('.draggable-marker').css('top'),
            posLeft = $('.draggable-marker').css('left');

            $('.draggable-marker').draggable({
                cancel: false,
                stop: function (e, ui) {

                    var draggableId = $(this).draggable().attr("id");
                    var ioId = $(this).draggable().attr("data-ioid");
                    var ioType = $(this).draggable().attr("data-iotype");
                    var ioVal = parseBool($(this).draggable().attr("data-iovalue"));

                    $(this).draggable().remove();   //destroy draggable

                    var positionMapX = $("#map").offset().left - $(window).scrollLeft();
                    var positionMapY = $("#map").offset().top - $(window).scrollTop();

                    var iconIoControllContent = "";

                    var ioIcon;
                    if (draggableId.indexOf('output') > -1) {
                        if (ioVal) {
                            ioIcon = outputIconOn;
                        }
                        else {
                            ioIcon = outputIconOff;
                        }
                        iconIoControllContent = $('#ioCtrlSwitch-'+ioId).html();
                    }
                    else if (draggableId.indexOf('input') > -1) {
                        ioIcon = inputIconOff;
                    }
                    else if (draggableId.indexOf('relay') > -1) {
                        ioIcon = outputIconOff;
                        iconIoControllContent = $('#ioCtrlSwitch-' + ioId).html();
                    }
                    else {
                        if (ioVal) {
                            ioIcon = systemIconOn;
                        }
                        else {
                            ioIcon = systemIconOff;
                        }
                    }

                    var coordsX = e.clientX - positionMapX, // 50 is the width of the menu
                        coordsY = e.clientY - positionMapY, // 20 is the half of markers height
                        point = L.point(coordsX, coordsY), // createing a Point object with the given x and y coordinates
                        markerCoords = map.containerPointToLatLng(point); // getting the geographical coordinates of the point

                    var innerPopupContent = "<div>" + ioType + " : " + ioId + "</div> <div>" + iconIoControllContent + "</div>";

                    // Creating a new marker and adding it to the map
                    markers[markersCount] = L.marker([markerCoords.lat, markerCoords.lng], {
                        draggable: true,
                        icon: ioIcon //ioIcon
                    }).addTo(map).bindPopup(innerPopupContent);
                    var ioMapDefinition = new Object();
                    ioMapDefinition.Latitude = markerCoords.lat;
                    ioMapDefinition.Longitude = markerCoords.lng;
                    ioMapDefinition.IoId = ioId;
                    ioMapDefinition.Type = ioType;
                    ioMapDefinition.DeviceId = $(this).draggable().attr("data-deviceid");

                    //  ioMapDefinition.Marker = markers[markersCount];

                    hubModel.MapDefinition.IoMapDefinitions.push(ioMapDefinition);

                    markersCount++;
                }
            });
        }

        addMarkers();

        $('#mapsubmit').click(function () {
          //  var MapDefinition = new Object();

            //update coordiantes for io from adj markers
            $.each(hubModel.MapDefinition.IoMapDefinitions, function (index, value) {
                //TODO some other way of tracking changed marker pos - not loading bound markers data
                //var curPos = value.Marker.getLatLng();
                //value.Latitude = curPos.lat;   //load marker possitions
                //value.Longitude = curPos.lng;
                //delete value.Marker;    // = null;
            });
            hubModel.Devices = null;
            hubModel.Map = null;

            //post all mapped io defs
            hubProxy.server.updateAlarmMap(hubModel);

        });

        getLocation();  //async get location

        $('.iomenutoggle').on('click', function (e) {
            e.preventDefault();
        });

        /********** Hub/Model ****************/

        hubProxy = $.connection.alarmSystemMapHub;     // the generated client-side hub proxy
        hubProxy.client.updateMap = function (mapData) {
            hubModel = mapData;

            //load model to menu/map
            $.each(hubModel.MapDefinition.IoMapDefinitions, function (index, value) {

                var ioMapDefinition = value;
                var draggableId = ioMapDefinition.IoId;
                var ioId = ioMapDefinition.IoId;
                var ioType = ioMapDefinition.Type;

                var ioVal = 0;  //parseBool(ioMapDefinition.DeviceIoCategory);
                var iconIoControllContent = "";

                var ioIcon;
                if (ioType == 1) {
                    if (ioVal) {
                        ioIcon = outputIconOn;
                    }
                    else {
                        ioIcon = outputIconOff;
                    }
                    iconIoControllContent = $('#ioCtrlSwitch-' + ioId).html();
                }
                else if (ioType == 2) {
                    if (ioVal) {
                        ioIcon = inputIconOn;
                    }
                    else {
                        ioIcon = inputIconOff;
                    }
                }
                else if (ioType == 3) {
                    ioIcon = outputIcon;
                    iconIoControllContent = $('#ioCtrlSwitch-' + ioId).html();
                }
                else {
                    if (ioVal) {
                        ioIcon = systemIconOn;
                    }
                    else {
                        ioIcon = systemIconOff;
                    }
                }
                var innerPopupContent = "<div>" + ioId + "</div> <div>" + iconIoControllContent + "</div>";
                markers[markersCount] = L.marker([ioMapDefinition.Latitude, ioMapDefinition.Longitude], {
                    draggable: true,
                    icon: ioIcon
                }).addTo(map).bindPopup(innerPopupContent);
                markersCount++;

            });
        }

        $.connection.hub.start().done(function () {
            hubProxy.server.getMapData(@Model.ServerId.ToString());   //intialy load map data
        });


    });


</script>


@functions{

    public string SpanClassForArmStatusDisplay()
    {
        if (Model.Config.Armed)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string DescForArmStatusDisplay()
    {
        if (Model.Config.Armed)
        {
            return "Armed";
        }
        else
        {
            return "Disarmed";
        }
    }



    public string SpanClassForViolationStatusDisplay()
    {
        if (Model.Config.Violation)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string SpanClassForFailureStatusDisplay()
    {
        if (Model.Config.Failure)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string DescForViolationStatusDisplay()
    {
        if (Model.Config.Violation)
        {
            return "Yes";
        }
        else
        {
            return "No";
        }
    }


    public string DescForArmAction()
    {
        if (Model.Config.Armed)
        {
            return "Disarm";
        }
        else
        {
            return "Arm";
        }
    }

}



<div role="tabpanel">

    <ul class="nav nav-tabs" role="tablist" id="actionselector">
        <li role="presentation" style="width: 50%;" class="active">
            <a href="#tabStatus" aria-controls="tabStatus" role="tab" data-toggle="tab">Status</a>
        </li>
        <li role="presentation" style="width:50%;">
            <a href="#tabConfigure" aria-controls="tabConfigure" role="tab" data-toggle="tab">Configure</a>
        </li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">

        <div role="tabpanel" class="tab-pane active" id="tabStatus">
            <div class="container-fluid">

                <div class="row">

                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <center>
                                <h2>Status</h2>
                            </center>
                        </div>

                        <div class="panel-body">

                            <div class="col-md-6">

                                <div class="row">
                                    <div class="map_container">
                                        <div id="map_canvas" class="map_canvas">
                                            <div class="form-group">
                                                <div id="map" style="height: 400px">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>

                            <div class="col-md-6">
                                @if (Model.Config != null)
                                {
                                    <div class="row">

                                        <div class="col-lg-3 col-sm-4 col-xs-12">
                                            <div style="margin-left: auto; margin-right: auto;" align="center" class="pagination-centered">
                                                <a href="@Url.Action("Index", "AlarmSystemConfiguration", new {DeviceId = Model.ServerId})" role="button">
                                                    @if (Model.Config.Armed)
                                                    {
                                                        <img src="~/Content/img/klodka4.png" class="thumbnail img-responsive">
                                                    }
                                                    else
                                                    {
                                                        <img src="~/Content/img/klodka3a.png" class="thumbnail img-responsive">
                                                    }
                                                </a>
                                            </div>



                                        </div>

                                        <div class="col-lg-3 col-sm-4 col-xs-12">
                                            <div style="margin-left: auto; margin-right: auto;" align="center" class="pagination-centered">
                                                <a href="@Url.Action("Index", "AlarmSystemConfiguration", new {DeviceId = Model.ServerId})" role="button">
                                                    @if (Model.Config.Failure)
                                                    {
                                                        <img src="~/Content/img/wykrzyknik1.png" class="thumbnail img-responsive">

                                                    }
                                                    else
                                                    {
                                                        <img src="~/Content/img/wykrzyknik2.png" class="thumbnail img-responsive">
                                                    }
                                                </a>
                                             </div>
                                            </div>


                                        <div class="col-lg-3 col-sm-4 col-xs-12 center-block">
                                            <div style="margin-left: auto; margin-right: auto;" align="center" class="pagination-centered">
                                                <a href="@Url.Action("Index", "AlarmSystemConfiguration", new {DeviceId = Model.ServerId})" role="button">
                                                    @if (Model.Config.Violation)
                                                    {
                                                        <img src="~/Content/img/oko5.png" class="thumbnail img-responsive">
                                                    }
                                                    else
                                                    {
                                                        <img src="~/Content/img/oko6.png" class="thumbnail img-responsive">
                                                    }
                                                </a>
                                            </div>

                                        </div>
                                    </div>

                                    <div class="row col-md-12">

                                        <ul class="list-group">


                                            <li class="list-group-item">
                                                <span class="glyphicon glyphicon-th-list"></span>
                                                Devices :
                                                <span class="label label-default label-pill pull-right pull-xs-right">@Model.Config.Devices</span>
                                            </li>

                                            <li class="list-group-item">
                                                <span class="glyphicon glyphicon-lock"></span>
                                                Armed :
                                                <span class="@SpanClassForArmStatusDisplay() label label-default label-pill pull-right pull-xs-right">@DescForArmStatusDisplay()</span>
                                            </li>

                                            <li class="list-group-item">
                                                <span class="glyphicon glyphicon-eye-open"></span>
                                                <td>Violation</td> :
                                                <span class="@SpanClassForViolationStatusDisplay() label label-default label-pill pull-right pull-xs-right">@DescForViolationStatusDisplay()</span>
                                            </li>



                                            <li class="list-group-item">
                                                <span class="glyphicon glyphicon-exclamation-sign"></span>
                                                Failure :
                                                <span class="@SpanClassForFailureStatusDisplay() label label-default label-pill pull-right pull-xs-right">@Model.Config.Failure.ToString()</span>
                                            </li>

                                        </ul>

                            </div>
                                }


                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <div role="tabpanel" class="tab-pane" id="tabConfigure">

            <div role="tabpanel">

                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <center>
                            <h2>Select configuration type</h2>
                        </center>
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-lg-3 col-sm-4 col-xs-12">
                                <div class="thumbnail">
                                    <a href="@Url.Action("Edit", "AlarmSystemView", new {ServerId = Model.ServerId})" role="button">
                                        <img src="~/Content/img/config1.png" class="thumbnail img-responsive">
                                    </a>
                                    <div class="caption text-center">
                                        <h3>Global</h3>
                                    </div>
                                </div>

                            </div>
                            <div class="col-lg-3 col-sm-4 col-xs-12">
                                <div class="thumbnail">
                                    <a href="@Url.Action("Index", "AlarmSystemDeviceConfig", new {ServerId = Model.ServerId, DeviceId = 0})" role="button">
                                        <img src="~/Content/img/config2.png" class="thumbnail img-responsive">
                                    </a>
                                    <div class="caption text-center">
                                        <h3>Devices</h3>
                                    </div>
                                </div>

                            </div>
                            <div class="col-lg-3 col-sm-4 col-xs-12">
                                <div class="thumbnail">
                                    <a href="@Url.Action("View", "AlarmSystemZonesConfig", new {DeviceId = Model.ServerId})" role="button">
                                        <img src="~/Content/img/strefy1.png" class="thumbnail img-responsive">
                                    </a>
                                    <div class="caption text-center">
                                        <h3>Zones</h3>
                                    </div>
                                </div>

                            </div>
                            <div class="col-lg-3 col-sm-4 col-xs-12">
                                <div class="thumbnail">
                                    <a href="@Url.Action("View", "AlarmSystemGsmConfig", new {DeviceId = Model.ServerId})" role="button">
                                        <img src="~/Content/img/tel.png" class="thumbnail img-responsive">
                                    </a>
                                    <div class="caption  text-center">
                                        <h3>Reporting</h3>
                                    </div>
                                </div>

                            </div>

                            <div class="col-lg-3 col-sm-4 col-xs-12">
                                <div class="thumbnail">
                                    <a href="@Url.Action("Edit", "AlarmSystemMap", new {ServerId = Model.ServerId})" role="button">
                                        <img src="~/Content/img/mapa.png" class="thumbnail img-responsive">
                                    </a>
                                    <div class="caption  text-center">
                                        <h3>Maps</h3>
                                    </div>
                                </div>

                            </div>

                            <div class="col-lg-3 col-sm-4 col-xs-12">
                                <div class="thumbnail">
                                    <a href="@Url.Action("View", "AlarmSystemUsersConfig", new {DeviceId = Model.ServerId})" role="button">
                                        <img src="~/Content/img/user.png" class="thumbnail img-responsive">
                                    </a>
                                    <div class="caption  text-center">
                                        <h3>Users</h3>
                                    </div>
                                </div>

                            </div>

                            <div class="col-lg-3 col-sm-4 col-xs-12">
                                <div class="thumbnail">
                                    <a href="@Url.Action("View", "AlarmSystemAuthorizedDevices", new {DeviceId = Model.ServerId})" role="button">
                                        <img src="~/Content/img/config2.png" class="thumbnail img-responsive">
                                    </a>
                                    <div class="caption  text-center">
                                        <h3>Authorization</h3>
                                    </div>
                                </div>

                            </div>

                            <div class="col-lg-3 col-sm-4 col-xs-12">
                                <div class="thumbnail">
                                    <a href="@Url.Action("View", "AlarmSystemEvents", new {DeviceId = Model.ServerId})" role="button">
                                        <img src="~/Content/img/zegar1.png" class="thumbnail img-responsive">
                                    </a>
                                    <div class="caption  text-center">
                                        <h3>Events</h3>
                                    </div>
                                </div>

                            </div>


                        </div>
                    </div>
                    <div class="panel-footer"></div>
                </div>


                @*@{Html.RenderAction("ConfigurationSelect", new { DeviceId = Model.ServerId });}*@

            </div>

        </div>

    </div>
</div>
