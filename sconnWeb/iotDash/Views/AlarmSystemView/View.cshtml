@model iotDash.Areas.AlarmSystem.Models.AlarmSystemGlobalModel
@using sconnConnector

@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/toggleswitch")
@Scripts.Render("~/bundles/signalr")
@Scripts.Render("~/bundles/numspin")
@Scripts.Render("~/bundles/fancybox")

@Styles.Render("~/bundles/css/toggleswitch")
@Styles.Render("~/bundles/css/numspin")

@{
    ViewBag.Title = "Index";
}

@if (Model.Config != null)
{
    <h2>@Model.Config.siteName</h2>
}

<script src="~/signalr/hubs"></script>

<script type="text/javascript">
    $(document).ready(function() {
        $(".fancybox").fancybox();
    });
</script>


@functions{

    public string SpanClassForArmStatusDisplay()
    {
        if (Model.Config.siteCfg.Armed)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string DescForArmStatusDisplay()
    {
        if (Model.Config.siteCfg.Armed)
        {
            return "Armed";
        }
        else
        {
            return "Disarmed";
        }
    }



    public string SpanClassForViolationStatusDisplay()
    {
        if (Model.Config.siteCfg.Violation)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }

    public string DescForViolationStatusDisplay()
    {
        if (Model.Config.siteCfg.Violation)
        {
            return "Yes";
        }
        else
        {
            return "No";
        }
    }


    public string DescForArmAction()
    {
        if (Model.Config.siteCfg.Armed)
        {
            return "Disarm";
        }
        else
        {
            return "Arm";
        }
    }


    public string ContentForDigitalIoValue(int value)
    {
        if (value == 0)
        {
            return "<button type='button' class='btn btn-danger'>" + value.ToString() + "</button>";
        }
        else
        {
            return "<button type='button' class='btn btn-success'>" + value.ToString() + "</button>";
        }
    }

    public string ImageUrlForDigitalIoValue(int value)
    {
        if (value == 0)
        {
            return "";
        }
        else
        {
            return "";
        }
    }

    public string GetProgressBarClassForSupplyValue(double value)
    {
        if (value >= 16)
        {
            return "progress-bar-success";
        }
        else if (value >= 13.8)
        {
            return "progress-bar-warning";
        }
        else
        {
            return "progress-bar-danger";
        }
    }


    public string GetProgressBarClassForBatteryValue(double value)
    {
        if (value >= 12)
        {
            return "progress-bar-success";
        }
        else if (value >= 9)
        {
            return "progress-bar-warning";
        }
        else
        {
            return "progress-bar-danger";
        }
    }

    public string GetProgressBarValueForVoltageBattery(double value)
    {
        if (value >= 9)
        {
            return ((value / ipcDefines.SUPP_BATT_LEAD_ACID_MAX_VOLTAGE) * 100).ToString();
        }
        else
        {
            return "100";  ///error 100 full
        }
    }

    public string GetProgressBarValueForVoltageMain(double value)
    {
        if (value >= 9)
        {
            return ((value / ipcDefines.SUPP_MAIN_AC_MAX_VOLTAGE) * 100).ToString();
        }
        else
        {
            return "100";  ///error 100 full
        }
    }

    //TODO generate req param input lists


}


<script>

    var Reloading = false;



    function ReloadPanels() {

        Reloading = true;

        $(".panel").removeClass("panel-info");
        $(".panel").removeClass("panel-primary");

        $(".panel").each(function () {
            //apply class based on value
            var contval = $(this).find(".noderesval").first().attr("title");
            var pval = parseInt(contval);
            if (pval == 1) {
                $(this).addClass("panel-primary");
            } else {
                $(this).addClass("panel-info");
            }

            //set all result params
            $(this).find(".tgsw-action").each(function () {
                var IsSet = (pval == 1 ? true : false);
                var sw = $(this).bootstrapSwitch('state', IsSet);

            });

        });

        Reloading = false;
    }


    function syntaxHighlight(json) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }

    var obj = { a: 1, 'b': 'foo', c: [false, 'false', null, 'null', { d: { e: 1.3e5, f: '1.3e5' } }] };

    $(function () {

        ReloadPanels();

        $('.spinEdit').spinedit({
            minimum: 50,
            maximum: 12500,
            step: 50,
            value: 150,
            numberOfDecimals: 0
        });



        $('.tgsw-action').on('switchChange.bootstrapSwitch', function () {

            if (!Reloading) {

                //get sender id
                var ElementId = $(this).attr("id");
                var AccessorId = "#".concat(ElementId);

                //TODO load req param input lists
                var StateToSet = $(this).bootstrapSwitch('state');
                //alert("req param :" + StateToSet);
                var ParamList = [StateToSet];

                //perform action
                $.ajax({
                    url: '@Url.Action("PerformAction", "Device")',
                    type: this.method,
                    data: {
                        ActionId: $(AccessorId).attr("title"),
                        ActionParams: ParamList
                    },
                    success: function (result) {
                        $('#resultview').html(result);
                    }
                });

            }


        });


        $('#actionselector a').click(function (e) {
            e.preventDefault()
            $(this).tab('show')
        })


    });

</script>


<div role="tabpanel">

    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist" id="actionselector">
        <li role="presentation" class="active"><a href="#tabStatus" aria-controls="tabStatus" role="tab" data-toggle="tab">Status</a></li>
        <li role="presentation"><a href="#tabConfigure" aria-controls="tabConfigure" role="tab" data-toggle="tab">Configure</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">

        <div role="tabpanel" class="tab-pane active" id="tabStatus">
            <div class="container-fluid">
                <div class="row">
                    <div id="ReloadModelData" class="col-md-1">
                        @Html.ActionLink("Refresh", "Index", new { DeviceId = Model.ServerId }, new { @class = "glyphicon glyphicon-refresh" })
                    </div>
                </div>

                <div class="row">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <center>
                                <h2>Info</h2>
                            </center>
                        </div>
                        <div class="panel-body">
                            <div class="col-md-7">
                                <div class="col-md-12 embed-responsive embed-responsive-16by9">
                                    <a class="fancybox" rel="group" href="http://farm2.staticflickr.com/1518/23483607324_5846f25522_b.jpg"><img src="http://farm2.staticflickr.com/1518/23483607324_5846f25522_m.jpg" alt="" /></a>
                                    @*<img class="embed-responsive-item" src="http://farm2.staticflickr.com/1518/23483607324_5846f25522_b.jpg"/>*@
                                </div>

                            </div>

                            <div class="col-md-5">
                                <ul>
                                    <li>
                                        <div class="col-md-6">
                                            Firmware version :
                                        </div>
                                        <div class="col-md-6">
                                            1.001
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>

                    </div>

                </div>


                <div class="row">

                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <center>
                                <h2>Status</h2>
                            </center>
                        </div>
                        <div class="panel-body">
                            <p></p>
                        </div>

                        <table class="table">
                            <tr>
                                <td>Device Number</td>
                                <td>@Model.Config.siteCfg.deviceNo</td>
                            </tr>

                            <tr>
                                <td>Armed</td>
                                <td><span class='@SpanClassForArmStatusDisplay()'>@DescForArmStatusDisplay()</span></td>
                            </tr>

                            <tr>
                                <td>Violation</td>
                                <td><span class='@SpanClassForViolationStatusDisplay()'>@DescForViolationStatusDisplay()</span></td>
                            </tr>

                            @if (Model.Device != null)
                            {
                                <tr>
                                    <td>Power supply</td>
                                    <td>
                                        <div class="progress">
                                            <div class="progress-bar  @(GetProgressBarClassForSupplyValue(Model.Device.MainVoltage))" role="progressbar" aria-valuenow="@Model.Device.MainVoltage.ToString()" aria-valuemin="0" aria-valuemax="24" style="width:  @(GetProgressBarValueForVoltageMain(Model.Device.MainVoltage))%;">
                                                @Model.Device.MainVoltage.ToString() V
                                            </div>
                                        </div>
                                    </td>
                                </tr>


                                <tr>
                                    <td>Battery</td>
                                    <td>
                                        <div class="progress">
                                            <div class="progress-bar @(GetProgressBarClassForBatteryValue(Model.Device.BatteryVoltage))" role="progressbar" aria-valuenow="@Model.Device.BatteryVoltage.ToString()" aria-valuemin="0" aria-valuemax="15" style="width: @(GetProgressBarValueForVoltageBattery(Model.Device.MainVoltage))%;">
                                                @Model.Device.BatteryVoltage.ToString() V
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }


                        </table>

                    </div>

                </div>

                <div class="row">
                    @Html.ActionLink(@DescForArmAction(), "ToggleArm", new { DeviceId = Model.ServerId }, new { @class = "btn btn-primary" })
                </div>


                <div class="row">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-2">
                                        <img src="~/Content/img/sensorin.png" alt="563te" class="img-circle img-section-icon">
                                    </div>
                                    <div class="col-md-10">
                                        <h2>Inputs</h2>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body"></div>
                        <table class="table">
                            <tr>
                                <th>Input </th>
                                <th>Type</th>
                                <th>State </th>

                            </tr>
                            @if (Model.Device != null)
                            {
                                for (int i = 0; i < Model.Device.Inputs.Count; i++)
                                {
                                    <tr>
                                        <td>
                                            @Model.Device.Inputs[i].Name.ToString()
                                        </td>

                                        @Html.HiddenFor(model => model.Device.Inputs[i].Id)
                                        @Html.HiddenFor(model => model.Device.Inputs[i].NameId)

                                        <td>
                                            @Model.Device.Inputs[i].Type.ToString()
                                        </td>

                                        <td>
                                            @Html.Raw(HttpUtility.HtmlDecode(ContentForDigitalIoValue(Model.Device.Inputs[i].Value)))
                                        </td>

                                    </tr>
                                }
                            }
                        </table>
                    </div>

                </div>

                <div class="row">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="container-fluid">

                                <div class="row">

                                    <div class="col-md-2">
                                        <img src="~/Content/img/sensorout.png" alt="124das" class="img-circle img-section-icon">
                                    </div>

                                    <div class="col-md-10">

                                        <h2>Outputs</h2>

                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="panel-body"></div>
                        <table class="table">
                            <tr>
                                <th>Output </th>
                                <th>Type</th>
                                <th>State </th>

                            </tr>
                            @if (Model.Device != null)
                            {
                                for (int i = 0; i < Model.Device.Outputs.Count; i++)
                                {
                                    <tr>
                                        <td>
                                            @Model.Device.Inputs[i].Name.ToString()
                                        </td>

                                        @Html.HiddenFor(model => model.Device.Outputs[i].Id)
                                        @Html.HiddenFor(model => model.Device.Outputs[i].NameId)

                                        <td>
                                            @Model.Device.Outputs[i].Type.ToString()

                                        </td>

                                        <td>
                                            @Html.Raw(HttpUtility.HtmlDecode(ContentForDigitalIoValue(Model.Device.Outputs[i].Value)))
                                        </td>

                                    </tr>
                                }
                            }


                        </table>
                    </div>

                </div>


            </div>
        </div>

        <div role="tabpanel" class="tab-pane" id="tabConfigure">

            <div role="tabpanel">

                @{Html.RenderAction("ConfigurationSelect", new { DeviceId = Model.ServerId });}

            </div>


        </div>

    </div>
</div>

