@model iotDash.Areas.AlarmSystem.Models.AlarmSystemDeviceModel
@using System.Globalization
@using System.Linq.Expressions
@using iotDash.Helpers
@using sconnConnector
@using sconnConnector.POCO.Config


@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/signalr")
@Scripts.Render("~/bundles/numspin")
@Scripts.Render("~/bundles/fancybox")
@Scripts.Render("~/bundles/bootstrap-toggle")

@Styles.Render("~/bundles/css/numspin")
@Styles.Render("~/bundles/css/bootstrap-toggle")

@{
    ViewBag.Title = "Index";
}

@if (Model.Device != null)
{
    <h2>@Model.Device.Name</h2>
}

<script src="~/signalr/hubs"></script>


@functions{

    public string SpanClassForArmStatusDisplay()
    {
        if (Model.Device.Armed)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string DescForArmStatusDisplay()
    {
        if (Model.Device.Armed)
        {
            return "Armed";
        }
        else
        {
            return "Disarmed";
        }
    }



    public string SpanClassForViolationStatusDisplay()
    {
        if (Model.Device.Violation)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }

    public string DescForViolationStatusDisplay()
    {
        if (Model.Device.Violation)
        {
            return "Yes";
        }
        else
        {
            return "No";
        }
    }


    public string DescForArmAction()
    {
        if (Model.Device.Armed)
        {
            return "Disarm";
        }
        else
        {
            return "Arm";
        }
    }

    public string SpanClassForBooleanNormalPolarization(bool val)
    {
        if (val)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string SpanSclassForInputTypeValue(sconnInput Input)
    {
        bool valueIsOk = false;
        if (Input.Type == sconnInputType.NormallyClosed)
        {
            if (Input.Value > 0)
            {
                valueIsOk = true;
            }
        }
        else if (Input.Type == sconnInputType.NormallyOpen)
        {
            if (Input.Value == 0)
            {
                valueIsOk = true;
            }
        }
        else if (Input.Type == sconnInputType.DoubleParametrizedNC)
        {
            if (Input.Value == 1)
            {
                valueIsOk = true;
            }
        }
        else if (Input.Type == sconnInputType.SingleParametrizedNC)
        {
            if (Input.Value == 1)
            {
                valueIsOk = true;
            }
        }


        if (valueIsOk)
        {
            return "btn btn-success";
        }
        else
        {
            return "btn btn-danger";
        }

    }

    public string SpanClassForBooleanReversePolarization(bool val)
    {
        if (val)
        {
            return "label label-danger";

        }
        else
        {
            return "label label-success";
        }
    }


    public string SpanClassForNumericPositive(int val)
    {
        if (val > 0)
        {
            return "label label-success";
        }
        else
        {
            return "label label-danger";
        }
    }

    public string ContentForDigitalInput(sconnInput input)
    {
        string valClass = SpanSclassForInputTypeValue(input);
        return "<button type='button' class='" + valClass + "'>" + input.Value.ToString() + "</button>";
    }

    public string ContentForDigitalIoValue(int value)
    {
        if (value == 0)
        {
            return "<button type='button' class='btn btn-danger'>" + value.ToString() + "</button>";
        }
        else
        {
            return "<button type='button' class='btn btn-success'>" + value.ToString() + "</button>";
        }
    }

    public string ImageUrlForDigitalIoValue(int value)
    {
        if (value == 0)
        {
            return "";
        }
        else
        {
            return "";
        }
    }

    public string GetProgressBarClassForSupplyValue(double value)
    {
        if (value >= 16)
        {
            return "progress-bar-success";
        }
        else if (value >= 13.8)
        {
            return "progress-bar-warning";
        }
        else
        {
            return "progress-bar-danger";
        }
    }


    public string GetProgressBarClassForBatteryValue(double value)
    {
        if (value >= 12)
        {
            return "progress-bar-success";
        }
        else if (value >= 9)
        {
            return "progress-bar-warning";
        }
        else
        {
            return "progress-bar-danger";
        }
    }

    public string GetProgressBarValueForVoltageBattery(double value)
    {
        if (value >= 9)
        {
            return ((value / ipcDefines.SUPP_BATT_LEAD_ACID_MAX_VOLTAGE) * 100).ToString("0.00", CultureInfo.CreateSpecificCulture("en-US"));
        }
        else
        {
            return "100.00";  ///error 100 full
        }
    }

    public string GetProgressBarValueForVoltageMain(double value)
    {
        if (value >= 9)
        {
            return ((value / ipcDefines.SUPP_MAIN_AC_MAX_VOLTAGE) * 100).ToString("0.00", CultureInfo.CreateSpecificCulture("en-US"));
        }
        else
        {
            return "100.00";  ///error 100 full
        }
    }

    //TODO generate req param input lists


}


<script>

    var Reloading = false;
    var InputEditing = false;
    var OutputEditing = false;




    function ReloadPanels() {

        Reloading = true;

        $(".panel").removeClass("panel-info");
        $(".panel").removeClass("panel-primary");

        $(".panel").each(function () {
            //apply class based on value
            var contval = $(this).find(".noderesval").first().attr("title");
            var pval = parseInt(contval);
            if (pval == 1) {
                $(this).addClass("panel-primary");
            } else {
                $(this).addClass("panel-info");
            }

            //set all result params
            $(this).find(".tgsw-action").each(function () {
                var bval = $(this).attr("value");
                var sw = $(this).bootstrapSwitch('state', bval);
            });

        });

        Reloading = false;
    }


    function syntaxHighlight(json) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }

    var obj = { a: 1, 'b': 'foo', c: [false, 'false', null, 'null', { d: { e: 1.3e5, f: '1.3e5' } }] };


   

    $(document).ready(function () {
        $(".fancybox").fancybox();
    });



    $(function() {

        $('.iotoggle').change(function () {
            //$('#console-event').html('Toggle: ' + $(this).prop('checked'))
            document.getElementById('IoActivationForm').submit();
        })
      
        $('.iotoggler').change(function () {
            //alert("changed !");
            document.getElementById('IoActivationForm').submit();
        })
        

        $("#inputsEditToggle").click(function () {
            if (InputEditing) {
                $(".inputsEditView").hide();   //slideToggle("fast");
                $(".inputsStatusView").show();
            }
            else {
                $(".inputsStatusView").hide();
                $(".inputsEditView").show();
            }
            InputEditing = !InputEditing;
        });


        $("#outputsEditToggle").click(function () {
            if (OutputEditing) {
                $(".outputsEditView").hide();
                $(".outputsStatusView").show();
            }
            else {
                $(".outputsStatusView").hide();
                $(".outputsEditView").show();
            }
            OutputEditing = !OutputEditing;
        });


        $(".inputsEditView").hide();
        $(".outputsEditView").hide();



        ReloadPanels();

        $('.spinEdit').spinedit({
            minimum: 50,
            maximum: 12500,
            step: 50,
            value: 150,
            numberOfDecimals: 0
        });


        //$(".OutputActivations").toggleSwitch().change(function () {
        //    document.getElementById('IoActivationForm').submit();
        //});

        $('.tgsw-action').on('switchChange.bootstrapSwitch', function() {
              var ElementId = $(this).attr("value");
              document.getElementById('IoActivationForm').submit();
        });

    });

</script>



<div class="container-fluid">


@using (Html.BeginForm("Status", "AlarmSystemDeviceConfig",FormMethod.Post,new { name = "outputsForm", id = "IoActivationForm" }))
{
    @Html.HiddenFor(model => model.ServerId)

    @Html.HiddenFor(model => model.Device.Armed)
    @Html.HiddenFor(model => model.Device.Violation)
    @Html.HiddenFor(model => model.Device.Failure)

    @Html.HiddenFor(model => model.Device.InputNo)
    @Html.HiddenFor(model => model.Device.OutputNo)
    @Html.HiddenFor(model => model.Device.RelayNo)

    //info
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <center>
                    <h2>Info</h2>
                </center>
            </div>
            <div class="panel-body">
                <div class="col-md-7">
                    <div class="col-md-12 embed-responsive embed-responsive-16by9">
                        @*<a class="fancybox" rel="group" href="http://farm2.staticflickr.com/1518/23483607324_5846f25522_b.jpg"><img src="http://farm2.staticflickr.com/1518/23483607324_5846f25522_m.jpg" alt=""/></a>*@
                        <img class="embed-responsive-item" src="http://farm2.staticflickr.com/1518/23483607324_5846f25522_b.jpg" />
                    </div>

                </div>

                <div class="col-md-5">

                    <ul class="list-group">


                        <li class="list-group-item">
                            <span class="glyphicon glyphicon-barcode"></span> 
                            Hardware version :
                            <span class="label label-default label-pill pull-right pull-xs-right">@Model.Device.Revision.ToString()</span>
                        </li>

                        <li class="list-group-item">
                            <span class="glyphicon glyphicon-download"></span> 
                            Firmware version :
                            <span class="label label-default label-pill pull-right pull-xs-right">4.034</span>
                        </li>


                        <li class="list-group-item">
                            @Html.HiddenFor(model => model.Device.DomainNumber)
                            <span class="glyphicon glyphicon-file"></span>
                            Domain number :
                            <span class="label label-default label-pill pull-right pull-xs-right">@Model.Device.DomainNumber</span>
                        </li>

                        <li class="list-group-item">
                            @Html.HiddenFor(model => model.Device.Type)
                            <span class="glyphicon glyphicon-list-alt"></span>
                             Type :
                            <span class="label label-default label-pill pull-right pull-xs-right">@Model.Device.Type.ToString()</span>
                        </li>

                        <li class="list-group-item">
                            <span class="glyphicon glyphicon-log-in"></span>
                            Inputs :
                            <span class="@SpanClassForNumericPositive(@Model.Device.Inputs.Count) label label-default label-pill pull-right pull-xs-right">@Model.Device.Inputs.Count.ToString()</span>
                        </li>

                        <li class="list-group-item">
                            <span class="glyphicon glyphicon-bell"></span>
                            Outputs :
                            <span class="@SpanClassForNumericPositive(@Model.Device.Outputs.Count) label label-default label-pill pull-right pull-xs-right">@Model.Device.Outputs.Count.ToString()</span>
                        </li>

                        <li class="list-group-item">
                            <span class="glyphicon glyphicon-flash"></span>
                            Relays :
                            <span class="@SpanClassForNumericPositive(@Model.Device.Relays.Count) label label-default label-pill pull-right pull-xs-right">@Model.Device.Relays.Count.ToString()</span>
                        </li>

                        <li class="list-group-item">
                            @Html.HiddenFor(model => model.Device.KeypadModule)
                            <span class="glyphicon glyphicon-modal-window"></span>
                            Keypad :
                            <span class="label label-default label-pill pull-right pull-xs-right">@Model.Device.KeypadModule.ToString()</span>
                        </li>


                        <li class="list-group-item">
                            @Html.HiddenFor(model => model.Device.TemperatureModule)
                            <span class="glyphicon glyphicon-scale"></span>
                            Temperature sensor :
                            <span class="label label-default label-pill pull-right pull-xs-right">@Model.Device.TemperatureModule.ToString()</span>
                        </li>

                        <li class="list-group-item">
                            @Html.HiddenFor(model => model.Device.HumidityModule)
                            <span class="glyphicon glyphicon-tint"></span>
                            Humidity sensor:
                            <span class="label label-default label-pill pull-right pull-xs-right">@Model.Device.HumidityModule.ToString()</span>
                        </li>

                        <li class="list-group-item">
                            @Html.HiddenFor(model => model.Device.ComTcpIp)
                            <span class="glyphicon glyphicon-phone-alt"></span>
                            Ethernet :
                            <span class="@SpanClassForBooleanNormalPolarization(Model.Device.ComTcpIp) label label-default label-pill pull-right pull-xs-right">@Model.Device.ComTcpIp.ToString()</span>
                        </li>

                        <li class="list-group-item">
                            @Html.HiddenFor(model => model.Device.ComMiWi)
                            <span class="glyphicon glyphicon-file"></span>
                            MiWi :
                            <span class="@SpanClassForBooleanNormalPolarization(Model.Device.ComMiWi) label label-default label-pill pull-right pull-xs-right">@Model.Device.ComMiWi.ToString()</span>
                        </li>

                    </ul>
                </div>
            </div>

        </div>

    </div>

    //status
    <div class="row">

        <div class="panel panel-default">
            <div class="panel-heading">
                <center>
                    <h2>Status</h2>
                </center>
            </div>
            <div class="panel-body">
                <p></p>
            </div>

            <table class="table">

                @if (Model.Device != null)
            {
                    <tr>

                        <td class="col-lg-2 col-sm-2 col-xs-3">
                            <div class="col-lg-3 col-sm-3 col-xs-4">
                                <img src="~/Content/img/zasilanie1.png" class="img-responsive">
                            </div>
                        </td>


                        <td class="col-lg-4 col-sm-4 col-xs-3">
                            Power supply
                        </td>

                        <td class="col-lg-6 col-sm-6 col-xs-6">
                            <div class="progress">
                                <div class="progress-bar  @(GetProgressBarClassForSupplyValue(Model.Device.MainVoltage))" role="progressbar" aria-valuenow="@Model.Device.MainVoltage.ToString()" aria-valuemin="0" aria-valuemax="24" style="width: @(GetProgressBarValueForVoltageMain(Model.Device.MainVoltage))%;">
                                    @Html.HiddenFor(model => model.Device.MainVoltage)
                                     @Model.Device.MainVoltage.ToString() V
                                </div>
                            </div>
                        </td>

                    </tr>


                    <tr>
                        <td class="col-lg-2 col-sm-2 col-xs-3">
                            <div class="col-lg-3 col-sm-3 col-xs-4">
                                <img src="~/Content/img/bateria2.png" class="thumbnail img-responsive">
                            </div>
                        </td>

                        <td class="col-lg-4 col-sm-4 col-xs-3">
                            Battery
                        </td>

                        <td class="col-lg-6 col-sm-6 col-xs-6">
                            <div class="progress">
                                <div class="progress-bar @(GetProgressBarClassForBatteryValue(Model.Device.BatteryVoltage))" role="progressbar" aria-valuenow="@Model.Device.BatteryVoltage.ToString()" aria-valuemin="0" aria-valuemax="15" style="width: @(GetProgressBarValueForVoltageBattery(Model.Device.MainVoltage))%;">
                                        @Html.HiddenFor(model => model.Device.BatteryVoltage)
                                        @Model.Device.BatteryVoltage.ToString() V
                                </div>
                            </div>
                        </td>
                    </tr>
                }


            </table>

        </div>

    </div>


    //inputs
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-2">
                            <img src="~/Content/img/in.png" alt="563te" class="img-circle img-section-icon">
                        </div>
                        <div class="col-md-8">
                            <h2>Inputs</h2>
                        </div>
                        <div class="col-md-2">
                            <button id="inputsEditToggle" type="button" class="btn btn-default btn-lg">
                                <span class="glyphicon glyphicon-wrench">
                                </span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>


            <div class="panel-body">

                <div class="row inputsEditView">

                    <div class="form-group">
                        @Html.HiddenFor(model => model.Device.DeviceId)
                        @Html.HiddenFor(model => model.ServerId)
                    </div>

                    <div class="form-group">
                        <table class="table">
                            <tr>
                                <th>Input </th>
                                <th>Enabled</th>
                                <th>Sensitivity</th>
                                <th>Type</th>
                                <th>Activation group </th>

                            </tr>

                            @for (int i = 0; i < Model.Device.Inputs.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.TextBoxFor(model => model.Device.Inputs[i].Name)
                                    </td>

                                    @Html.HiddenFor(model => model.Device.Inputs[i].Id)
                                    @Html.HiddenFor(model => model.Device.Inputs[i].NameId)

                                    <td>
                                        @Html.CheckBoxFor(model => model.Device.Inputs[i].Enabled)
                                    </td>

                                    <td>
                                        @Html.TextBoxFor(model => model.Device.Inputs[i].Sensitivity)

                                    </td>

                                    <td>
                                        @Html.TextBoxFor(model => model.Device.Inputs[i].Type)

                                    </td>

                                    <td>
                                        @Html.TextBoxFor(model => model.Device.Inputs[i].ActivationGroup)

                                    </td>

                                </tr>
                            }
                        </table>
                    </div>

                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" value="Save" />
                    </div>

                </div>

                <div class="row inputsStatusView">
                    <table class="table">
                        <tr>
                            <th>Name </th>
                            <th>Type</th>
                            <th>Value </th>

                        </tr>
                        @if (Model.Device != null)
                        {
                            for (int i = 0; i < Model.Device.Inputs.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Model.Device.Inputs[i].Name.ToString()
                                    </td>

                                    @Html.HiddenFor(model => model.Device.Inputs[i].Id)
                                    @Html.HiddenFor(model => model.Device.Inputs[i].NameId)
                                    @Html.HiddenFor(model => model.Device.Inputs[i].ActivationGroup)
                                    @Html.HiddenFor(model => model.Device.Inputs[i].Enabled)
                                    @Html.HiddenFor(model => model.Device.Inputs[i].Sensitivity)
                                    @Html.HiddenFor(model => model.Device.Inputs[i].Type)
                                    @Html.HiddenFor(model => model.Device.Inputs[i].Value)

                                    <td>
                                        @Model.Device.Inputs[i].Type.ToString()
                                    </td>

                                    <td>
                                        @Html.Raw(HttpUtility.HtmlDecode(ContentForDigitalInput(Model.Device.Inputs[i])))
                                    </td>

                                </tr>
                            }
                        }
                    </table>
                </div>


            </div>

  
        </div>

    </div>


    //outputs
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="container-fluid">

                    <div class="row">
                        <div class="col-md-2">
                            <img src="~/Content/img/out.png" alt="124das" class="img-circle img-section-icon">
                        </div>
                        <div class="col-md-8">
                            <h2>Outputs</h2>
                        </div>
                        <div class="col-md-2">
                            <button id="outputsEditToggle" type="button" class="btn btn-default btn-lg">
                                <span class="glyphicon glyphicon-wrench">
                                </span>
                            </button>
                        </div>
                    </div>

                </div>
            </div>

            <div class="panel-body">

                <div class="outputsEditView">
                    <div class="form-group">
                        @Html.HiddenFor(model => model.Device.DeviceId)
                        @Html.HiddenFor(model => model.ServerId)
                    </div>

                    <div class="form-group">
                        <table class="table">
                            <tr>
                                <th>Output </th>
                                <th>Enabled</th>
                                <th>Type</th>

                            </tr>

                            @for (int i = 0; i < Model.Device.Outputs.Count; i++)
                            {
                                <tr>
                                    <td>
                                        @Html.TextBoxFor(model => model.Device.Outputs[i].Name)
                                    </td>

                                    @Html.HiddenFor(model => model.Device.Outputs[i].Id)
                                    @Html.HiddenFor(model => model.Device.Outputs[i].NameId)

                                    <td>
                                        @Html.CheckBoxFor(model => model.Device.Outputs[i].Enabled)
                                    </td>


                                    <td>
                                        @Html.TextBoxFor(model => model.Device.Outputs[i].Type)

                                    </td>

                                </tr>
                            }
                        </table>
                    </div>

                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" value="Send" />
                    </div>

                </div>

                <div class="outputsStatusView">
                    <table class="table">
                        <tr>
                            <th>Name </th>
                            <th>Type</th>
                            <th>Value </th>

                        </tr>
                        @if (Model.Device != null)
                {
                    for (int i = 0; i < Model.Device.Outputs.Count; i++)
                    {
                                <tr>
                                    <td>
                                        @Model.Device.Outputs[i].Name.ToString()
                                    </td>

                                    @Html.HiddenFor(model => model.Device.Outputs[i].Id)
                                    @Html.HiddenFor(model => model.Device.Outputs[i].NameId)
                                    @Html.HiddenFor(model => model.Device.Outputs[i].Type)
                                    @Html.HiddenFor(model => model.Device.Outputs[i].Enabled)

                                    <td>
                                        @Model.Device.Outputs[i].Type.ToString()
                                    </td>

                                    <td>
                                        <div class="checkbox">
                                            @Html.ToggleSwitchFor(model => model.Device.Outputs[i].Value)
                                        </div>
                                    </td>
                                </tr>
                            }
                        }


                    </table>
                </div>

            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            @*<input type="submit" class="btn btn-bitbucket" value="Update" />*@
        </div>
    </div>
}

</div>
