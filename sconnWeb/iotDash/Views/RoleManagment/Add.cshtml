@model iotDash.Models.IotRoleModel

@{
    ViewBag.Title = "Add";
}

@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<script>
    $(function () {
        $('.list-group.checked-list-box .list-group-item').each(function () {

            // Settings
            var $widget = $(this),
                $checkbox = $('<input type="checkbox" class="hidden" />'),
                color = ($widget.data('color') ? $widget.data('color') : "primary"),
                style = ($widget.data('style') == "button" ? "btn-" : "list-group-item-"),
                settings = {
                    on: {
                        icon: 'glyphicon glyphicon-check'
                    },
                    off: {
                        icon: 'glyphicon glyphicon-unchecked'
                    }
                };

            $widget.css('cursor', 'pointer')
            $widget.append($checkbox);

            // Event Handlers
            $widget.on('click', function () {
                $checkbox.prop('checked', !$checkbox.is(':checked'));
                $checkbox.triggerHandler('change');
                updateDisplay();
            });
            $checkbox.on('change', function () {
                updateDisplay();
            });


            // Actions
            function updateDisplay() {
                var isChecked = $checkbox.is(':checked');

                // Set the button's state
                $widget.data('state', (isChecked) ? "on" : "off");

                // Set the button's icon
                $widget.find('.state-icon')
                    .removeClass()
                    .addClass('state-icon ' + settings[$widget.data('state')].icon);

                // Update the button's color
                if (isChecked) {
                    $widget.addClass(style + color + ' active');
                } else {
                    $widget.removeClass(style + color + ' active');
                }
            }

            // Initialization
            function init() {

                if ($widget.data('checked') == true) {
                    $checkbox.prop('checked', !$checkbox.is(':checked'));
                }

                updateDisplay();

                // Inject the icon if applicable
                if ($widget.find('.state-icon').length == 0) {
                    $widget.prepend('<span class="state-icon ' + settings[$widget.data('state')].icon + '"></span>');
                }
            }
            init();
        });

        $('#get-checked-data').on('click', function (event) {
            event.preventDefault();
            var checkedItems = {}, counter = 0;
            $("#check-list-box li.active").each(function (idx, li) {
                checkedItems[counter] = $(li).text();
                counter++;
            });
            $('#display-json').html(JSON.stringify(checkedItems, null, '\t'));
        });
    });

</script>

<style>
    
/* CSS REQUIRED */
.state-icon {
    left: -5px;
}
.list-group-item-primary {
    color: rgb(255, 255, 255);
    background-color: rgb(66, 139, 202);
}

/* DEMO ONLY - REMOVES UNWANTED MARGIN */
.well .list-group {
    margin-bottom: 0px;
}
</style>



<div class="container-fluid">

    <div class="row">

    </div>

    <div class="row">
        <div id="addraz">
            @using (Html.BeginForm("Add", "RoleManagment"))
            {
                <fieldset>

                    <legend>Role</legend>

                    <div class="form-group">
                        @Html.HiddenFor(model => model.Role.DomainId)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Role.Name)
                        @Html.TextBoxFor(model => model.Role.Name, new {@class = "form-control"})
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.Role.Type)
                        @Html.EnumDropDownListFor(model => model.Role.Type, new {@class = "form-control"})
                    </div>

                    @if (Model.Sites != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Sites)
                            @Html.DropDownListFor(
                            model => model.Role.SiteId,
                            new SelectList(
                                Model.Sites,
                                "Id",
                                "SiteName",
                                Model.Role.SiteId
                                ),
                            new { @class = "form-control" }
                            )
                        </div>
                    }

                    @if (Model.Devices != null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Role.DeviceId, new { @class = "form-control" })
                            @Html.DropDownListFor(
                            model => model.Role.DeviceId,
                            new SelectList(
                                Model.Devices,
                                "Id",
                                "DeviceName",
                                Model.Role.DeviceId
                                ),
                            new { @class = "form-control" }
                            )
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.Role.Active)
                        @Html.EditorFor(model => model.Role.Active)
                    </div>


                    <div class="form-group">
                        <input type="submit" value="Send"/>
                    </div>

                   

                </fieldset>
            }
        </div>

    </div>

    <div class="row">
        <div id="resultview">
            @Html.Raw(HttpUtility.HtmlDecode(Model.Result))
        </div>
    </div>


</div>